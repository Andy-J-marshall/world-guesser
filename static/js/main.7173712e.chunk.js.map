{"version":3,"sources":["components/playButton.js","components/startNewGame.js","helpers/allCountryDefaultStats.js","components/countryGuesser/countryGuesserStats.js","helpers/utils.js","components/countryGuesser/countryGuesserFailurePage.js","components/basicValidation.js","components/borderingCountries/borderingCountriesFeedback.js","components/borderingCountries/borderingCountriesStats.js","components/borderingCountries/borderingCountriesFailurePage.js","components/borderingCountries/borderingCountriesSuccessPage.js","components/countryForm.js","components/borderingCountries/borderingCountriesClue.js","helpers/countryValidation.js","components/borderingCountries/borderingCountriesGuesser.js","components/countryGuesser/countryGuesserSuccessPage.js","components/countryGuesser/countryGuesserFeedback.js","components/countryGuesser/countryGuesser.js","helpers/countryHelper.js","components/country.js","App.js","index.js"],"names":["PlayButton","props","callback","buttonText","id","Button","variant","size","onClick","StartNewGame","countriesInfo","newGameStartedCallback","useState","newGameStarted","setNewGameStarted","a","allCountryStats","best","bestBorders","CountryGuesserStats","updateStats","updateStatsCallback","country","numberOfGuesses","succeeded","numberOfWins","setNumberOfWins","numberOfAttempts","setNumberOfAttempts","numberOfGames","setNumberOfGames","streak","setStreak","highScore","setHighScore","useEffect","localStorage","setItem","JSON","stringify","countryHighScores","parse","getItem","previousBestScore","error","console","log","toFixed","capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","CountryGuesserFailurePage","name","flag","map","guesses","style","color","href","border","src","alt","length","basicValidation","duplicateGuess","knownCountry","borderingCountriesFeedback","correctGuesses","incorrectGuesses","borderingCountriesCount","incorrectCount","guessesRemainingCount","guessesRemainingText","countriesRemainingCount","countriesRemainingText","BorderingCountriesStats","numberOfCorrectAnswers","setNumberOfCorrectAnswers","numberOfIncorrectAnswers","setNumberOfIncorrectAnswers","countryBordersHighScores","BorderingCountriesFailurePage","borderingCountries","missingAnswersArray","filter","countryGuess","includes","toLowerCase","BorderingCountriesSuccessPage","answerOrAnswers","messageText","CountryForm","possibleCountries","value","setValue","handleSubmit","Form","onSubmit","Group","className","onChange","options","placeholder","selected","type","BorderingCountriesClue","clues","checkValidGuess","guessedName","isValidCountry","find","borderingCountriesGuesser","numberOfBorderingCountriesText","setCorrectGuesses","correctLastGuess","setCorrectLastGuess","setIncorrectGuesses","setIncorrectCount","setGuesses","setDuplicateGuess","failed","setFailed","setSucceeded","setKnownCountry","guessedActualCountry","setGuessedActualCountry","setClues","startingLetters","letter","push","findStartingLetterOfBorders","event","preventDefault","target","trim","checkGuessIsCorrect","CountryGuesserSuccessPage","borderingCountriesGameStarted","setBorderingCountriesGameStarted","CountryGuessFeedback","guessedBorderingCountry","CountryGuesser","population","landlocked","region","subregion","capital","correctGuess","setCorrectGuess","setGuessedBorderingCountry","isGuessBorderingCountry","axios","get","response","body","data","countriesArray","countryCodeMapping","extraCountries","common","unMember","independent","countryMappingObj","code","cca3","returnObject","sort","responseBody","returnBorderingCountries","answerCountries","borderingCountry","allCountriesRequest","Country","countriesResponse","number","selectedCountry","Math","floor","random","borders","maps","googleMaps","toString","flags","png","selectCountry","App","allCountriesResponse","setAllCountriesResponse","foundCountry","setFindCountry","getAllCountriesRequest","then","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7173712e.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nfunction PlayButton(props) {\n    const callback = props.callback;\n    const buttonText = props.buttonText;\n\n    return (\n        <div id='new-game-button'>\n            <Button variant='primary' size='lg' onClick={callback}>{buttonText}</Button>\n        </div>\n    );\n}\n\nexport default PlayButton;\n","import React, { useState } from 'react';\nimport Country from './country';\nimport PlayButton from './playButton';\n\nfunction StartNewGame(props) {\n    const countriesInfo = props.countriesInfo;\n    const buttonText = props.buttonText;\n    const newGameStartedCallback = props.callback;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        newGameStartedCallback(true);\n    }\n\n    return (\n        <div id='start-new-game'>\n            {!newGameStarted && <br />}\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText={buttonText}\n            />}\n            {newGameStarted && <Country\n                countriesInfo={countriesInfo}\n            />}\n        </div>\n    )\n}\n\nexport default StartNewGame;\n","const allCountryStats = {\n    'Afghanistan': { best: null, bestBorders: null },\n    'Albania': { best: null, bestBorders: null },\n    'Algeria': { best: null, bestBorders: null },\n    'Andorra': { best: null, bestBorders: null },\n    'Angola': { best: null, bestBorders: null },\n    'Antigua and Barbuda': { best: null, bestBorders: null },\n    'Argentina': { best: null, bestBorders: null },\n    'Armenia': { best: null, bestBorders: null },\n    'Australia': { best: null, bestBorders: null },\n    'Austria': { best: null, bestBorders: null },\n    'Azerbaijan': { best: null, bestBorders: null },\n    'Bahamas': { best: null, bestBorders: null },\n    'Bahrain': { best: null, bestBorders: null },\n    'Bangladesh': { best: null, bestBorders: null },\n    'Barbados': { best: null, bestBorders: null },\n    'Belarus': { best: null, bestBorders: null },\n    'Belgium': { best: null, bestBorders: null },\n    'Belize': { best: null, bestBorders: null },\n    'Benin': { best: null, bestBorders: null },\n    'Bhutan': { best: null, bestBorders: null },\n    'Bolivia': { best: null, bestBorders: null },\n    'Bosnia and Herzegovina': { best: null, bestBorders: null },\n    'Botswana': { best: null, bestBorders: null },\n    'Brazil': { best: null, bestBorders: null },\n    'Brunei': { best: null, bestBorders: null },\n    'Bulgaria': { best: null, bestBorders: null },\n    'Burkina Faso': { best: null, bestBorders: null },\n    'Burundi': { best: null, bestBorders: null },\n    'Cambodia': { best: null, bestBorders: null },\n    'Cameroon': { best: null, bestBorders: null },\n    'Canada': { best: null, bestBorders: null },\n    'Cape Verde': { best: null, bestBorders: null },\n    'Central African Republic': { best: null, bestBorders: null },\n    'Chad': { best: null, bestBorders: null },\n    'Chile': { best: null, bestBorders: null },\n    'China': { best: null, bestBorders: null },\n    'Colombia': { best: null, bestBorders: null },\n    'Comoros': { best: null, bestBorders: null },\n    'Costa Rica': { best: null, bestBorders: null },\n    'Croatia': { best: null, bestBorders: null },\n    'Cuba': { best: null, bestBorders: null },\n    'Cyprus': { best: null, bestBorders: null },\n    'Czechia': { best: null, bestBorders: null },\n    'DR Congo': { best: null, bestBorders: null },\n    'Denmark': { best: null, bestBorders: null },\n    'Djibouti': { best: null, bestBorders: null },\n    'Dominica': { best: null, bestBorders: null },\n    'Dominican Republic': { best: null, bestBorders: null },\n    'Ecuador': { best: null, bestBorders: null },\n    'Egypt': { best: null, bestBorders: null },\n    'El Salvador': { best: null, bestBorders: null },\n    'Equatorial Guinea': { best: null, bestBorders: null },\n    'Eritrea': { best: null, bestBorders: null },\n    'Estonia': { best: null, bestBorders: null },\n    'Eswatini': { best: null, bestBorders: null },\n    'Ethiopia': { best: null, bestBorders: null },\n    'Fiji': { best: null, bestBorders: null },\n    'Finland': { best: null, bestBorders: null },\n    'France': { best: null, bestBorders: null },\n    'Gabon': { best: null, bestBorders: null },\n    'Gambia': { best: null, bestBorders: null },\n    'Georgia': { best: null, bestBorders: null },\n    'Germany': { best: null, bestBorders: null },\n    'Ghana': { best: null, bestBorders: null },\n    'Greece': { best: null, bestBorders: null },\n    'Greenland': { best: null, bestBorders: null },\n    'Grenada': { best: null, bestBorders: null },\n    'Guatemala': { best: null, bestBorders: null },\n    'Guinea': { best: null, bestBorders: null },\n    'Guyana': { best: null, bestBorders: null },\n    'Haiti': { best: null, bestBorders: null },\n    'Honduras': { best: null, bestBorders: null },\n    'Hungary': { best: null, bestBorders: null },\n    'Iceland': { best: null, bestBorders: null },\n    'India': { best: null, bestBorders: null },\n    'Indonesia': { best: null, bestBorders: null },\n    'Iran': { best: null, bestBorders: null },\n    'Iraq': { best: null, bestBorders: null },\n    'Ireland': { best: null, bestBorders: null },\n    'Israel': { best: null, bestBorders: null },\n    'Italy': { best: null, bestBorders: null },\n    'Ivory Coast': { best: null, bestBorders: null },\n    'Jamaica': { best: null, bestBorders: null },\n    'Japan': { best: null, bestBorders: null },\n    'Jordan': { best: null, bestBorders: null },\n    'Kazakhstan': { best: null, bestBorders: null },\n    'Kenya': { best: null, bestBorders: null },\n    'Kiribati': { best: null, bestBorders: null },\n    'Kosovo': { best: null, bestBorders: null },\n    'Kuwait': { best: null, bestBorders: null },\n    'Kyrgyzstan': { best: null, bestBorders: null },\n    'Laos': { best: null, bestBorders: null },\n    'Latvia': { best: null, bestBorders: null },\n    'Lebanon': { best: null, bestBorders: null },\n    'Lesotho': { best: null, bestBorders: null },\n    'Liberia': { best: null, bestBorders: null },\n    'Libya': { best: null, bestBorders: null },\n    'Liechtenstein': { best: null, bestBorders: null },\n    'Lithuania': { best: null, bestBorders: null },\n    'Luxembourg': { best: null, bestBorders: null },\n    'Madagascar': { best: null, bestBorders: null },\n    'Malawi': { best: null, bestBorders: null },\n    'Malaysia': { best: null, bestBorders: null },\n    'Maldives': { best: null, bestBorders: null },\n    'Mali': { best: null, bestBorders: null },\n    'Malta': { best: null, bestBorders: null },\n    'Marshall Islands': { best: null, bestBorders: null },\n    'Mauritania': { best: null, bestBorders: null },\n    'Mauritius': { best: null, bestBorders: null },\n    'Mexico': { best: null, bestBorders: null },\n    'Micronesia': { best: null, bestBorders: null },\n    'Moldova': { best: null, bestBorders: null },\n    'Monaco': { best: null, bestBorders: null },\n    'Mongolia': { best: null, bestBorders: null },\n    'Montenegro': { best: null, bestBorders: null },\n    'Morocco': { best: null, bestBorders: null },\n    'Mozambique': { best: null, bestBorders: null },\n    'Myanmar': { best: null, bestBorders: null },\n    'Namibia': { best: null, bestBorders: null },\n    'Nauru': { best: null, bestBorders: null },\n    'Nepal': { best: null, bestBorders: null },\n    'Netherlands': { best: null, bestBorders: null },\n    'New Zealand': { best: null, bestBorders: null },\n    'Nicaragua': { best: null, bestBorders: null },\n    'Niger': { best: null, bestBorders: null },\n    'Nigeria': { best: null, bestBorders: null },\n    'North Korea': { best: null, bestBorders: null },\n    'North Macedonia': { best: null, bestBorders: null },\n    'Norway': { best: null, bestBorders: null },\n    'Oman': { best: null, bestBorders: null },\n    'Pakistan': { best: null, bestBorders: null },\n    'Palau': { best: null, bestBorders: null },\n    'Palestine': { best: null, bestBorders: null },\n    'Panama': { best: null, bestBorders: null },\n    'Papua New Guinea': { best: null, bestBorders: null },\n    'Paraguay': { best: null, bestBorders: null },\n    'Peru': { best: null, bestBorders: null },\n    'Philippines': { best: null, bestBorders: null },\n    'Poland': { best: null, bestBorders: null },\n    'Portugal': { best: null, bestBorders: null },\n    'Qatar': { best: null, bestBorders: null },\n    'Republic of the Congo': { best: null, bestBorders: null },\n    'Romania': { best: null, bestBorders: null },\n    'Russia': { best: null, bestBorders: null },\n    'Rwanda': { best: null, bestBorders: null },\n    'Saint Kitts and Nevis': { best: null, bestBorders: null },\n    'Saint Lucia': { best: null, bestBorders: null },\n    'Saint Vincent and the Grenadines': { best: null, bestBorders: null },\n    'Samoa': { best: null, bestBorders: null },\n    'San Marino': { best: null, bestBorders: null },\n    'Saudi Arabia': { best: null, bestBorders: null },\n    'Senegal': { best: null, bestBorders: null },\n    'Serbia': { best: null, bestBorders: null },\n    'Seychelles': { best: null, bestBorders: null },\n    'Sierra Leone': { best: null, bestBorders: null },\n    'Singapore': { best: null, bestBorders: null },\n    'Slovakia': { best: null, bestBorders: null },\n    'Slovenia': { best: null, bestBorders: null },\n    'Solomon Islands': { best: null, bestBorders: null },\n    'Somalia': { best: null, bestBorders: null },\n    'South Africa': { best: null, bestBorders: null },\n    'South Korea': { best: null, bestBorders: null },\n    'South Sudan': { best: null, bestBorders: null },\n    'Spain': { best: null, bestBorders: null },\n    'Sri Lanka': { best: null, bestBorders: null },\n    'Sudan': { best: null, bestBorders: null },\n    'Suriname': { best: null, bestBorders: null },\n    'Sweden': { best: null, bestBorders: null },\n    'Switzerland': { best: null, bestBorders: null },\n    'Syria': { best: null, bestBorders: null },\n    'São Tomé and Príncipe': { best: null, bestBorders: null },\n    'Taiwan': { best: null, bestBorders: null },\n    'Tajikistan': { best: null, bestBorders: null },\n    'Tanzania': { best: null, bestBorders: null },\n    'Thailand': { best: null, bestBorders: null },\n    'Timor-Leste': { best: null, bestBorders: null },\n    'Togo': { best: null, bestBorders: null },\n    'Tonga': { best: null, bestBorders: null },\n    'Trinidad and Tobago': { best: null, bestBorders: null },\n    'Tunisia': { best: null, bestBorders: null },\n    'Turkey': { best: null, bestBorders: null },\n    'Turkmenistan': { best: null, bestBorders: null },\n    'Tuvalu': { best: null, bestBorders: null },\n    'Uganda': { best: null, bestBorders: null },\n    'Ukraine': { best: null, bestBorders: null },\n    'United Arab Emirates': { best: null, bestBorders: null },\n    'United Kingdom': { best: null, bestBorders: null },\n    'United States': { best: null, bestBorders: null },\n    'Uruguay': { best: null, bestBorders: null },\n    'Uzbekistan': { best: null, bestBorders: null },\n    'Vanuatu': { best: null, bestBorders: null },\n    'Vatican City': { best: null, bestBorders: null },\n    'Venezuela': { best: null, bestBorders: null },\n    'Vietnam': { best: null, bestBorders: null },\n    'Western Sahara': { best: null, bestBorders: null },\n    'Yemen': { best: null, bestBorders: null },\n    'Zambia': { best: null, bestBorders: null },\n    'Zimbabwe': { best: null, bestBorders: null },\n}\n\nexport default allCountryStats;","import React, { useState, useEffect } from 'react';\nimport allCountryStats from '../../helpers/allCountryDefaultStats';\n\nfunction CountryGuesserStats(props) {\n    const updateStats = props.updateStatsCallback;\n    const country = props.country;\n    const numberOfGuesses = props.numberOfGuesses;\n    const succeeded = props.succeeded;\n\n    const [numberOfWins, setNumberOfWins] = useState(0);\n    const [numberOfAttempts, setNumberOfAttempts] = useState(0);\n    const [numberOfGames, setNumberOfGames] = useState(0);\n    const [streak, setStreak] = useState(0);\n    const [highScore, setHighScore] = useState(false);\n\n    const called = true;\n\n    useEffect(() => {\n        const { numberOfWins, numberOfGames, numberOfAttempts, streak } = updateStats();\n        setNumberOfWins(numberOfWins);\n        setNumberOfGames(numberOfGames);\n        setNumberOfAttempts(numberOfAttempts);\n        setStreak(streak);\n\n        try {\n            localStorage.setItem('numberOfWins', JSON.stringify(numberOfWins));\n            localStorage.setItem('numberOfGames', JSON.stringify(numberOfGames));\n            localStorage.setItem('numberOfAttempts', JSON.stringify(numberOfAttempts));\n            localStorage.setItem('streak', JSON.stringify(streak));\n\n            // TODO should this live in the updateStats callback? Same with borders too?\n            // TODO need a way of displaying the info (optionally)\n            const countryHighScores = JSON.parse(localStorage.getItem('countryHighScores')) || allCountryStats;\n            if (succeeded) {\n                const previousBestScore = countryHighScores[country].best;\n                if (!previousBestScore || numberOfGuesses < previousBestScore) {\n                    countryHighScores[country].best = numberOfGuesses;\n                    setHighScore(true);\n                }\n            } else {\n                countryHighScores[country].best = 99;\n            }\n            localStorage.setItem('countryHighScores', JSON.stringify(countryHighScores));\n        } catch (error) {\n            console.log('Unable to update stats');\n        }\n    }, [called]);\n\n    return (\n        <div id='country-guesser-stats'>\n            {numberOfAttempts > 0 && numberOfGames > 0 && <div>\n                <h1>Stats</h1>\n                {succeeded > 0 && highScore && <p>That was your best score for {country}!</p>}\n                <p>Total games: {numberOfGames}</p>\n                <p>Number of wins: {numberOfWins}</p>\n                {numberOfWins > 0 && <p>Win percentage: {((numberOfWins / numberOfGames) * 100).toFixed(1)}%</p>}\n                {numberOfWins > 0 && <p>Number of guesses per correct answer: {(numberOfAttempts / numberOfWins).toFixed(1)}</p>}\n                {numberOfWins > 0 && streak > 0 && <p>You are on a {streak} game winning streak playing Country Guesser</p>}\n            </div>}\n        </div>\n    );\n}\n\nexport default CountryGuesserStats;\n","export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] = array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        })\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString = index === 0 ? capitalizedString : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n\nexport function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport CountryGuesserStats from './countryGuesserStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserFailurePage(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const flag = props.flag;\n    const map = props.map;\n    const guesses = props.guesses;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfAttempts')) || 0;\n        const stats = {\n            numberOfWins,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            streak: 0,\n        };\n        return stats;\n    }\n\n    return (\n        <div id='failure-page'>\n            {!newGameStarted && < div id='country-failure' >\n                <p style={{ color: 'red' }}>You failed. Better luck next time</p>\n                {<p>The answer was <a href={map}>{name}</a></p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                <img style={{ border: 'solid' }} src={flag} alt='Country Flag' />\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <CountryGuesserStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={false}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Try again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default CountryGuesserFailurePage;\n","import React from 'react';\n\nfunction basicValidation(props) {\n    const duplicateGuess = props.duplicateGuess;\n    const knownCountry = props.knownCountry;\n\n    return (\n        <div style={{ color: 'brown' }} id='invalid-guess-feedback'>\n            {duplicateGuess && <p>You've already tried that country!</p>}\n            {!knownCountry && <p>Enter a valid country name</p>}\n        </div>\n    )\n}\n\nexport default basicValidation;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesFeedback(props) {\n    const correctGuesses = props.correctGuesses;\n    const incorrectGuesses = props.incorrectGuesses;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const incorrectCount = props.incorrectCount;\n\n    const guessesRemainingCount = 6 - incorrectCount;\n    const guessesRemainingText = incorrectCount >= 5\n        ? `You have ${guessesRemainingCount} life remaining`\n        : `You have ${guessesRemainingCount} lives remaining`;\n\n    const countriesRemainingCount = borderingCountriesCount - correctGuesses.length;\n    const countriesRemainingText = correctGuesses.length === borderingCountriesCount - 1\n        ? `There is ${countriesRemainingCount} bordering country remaining`\n        : `There are ${countriesRemainingCount} bordering countries remaining`;\n\n    return (\n        <div id='bordering-countries-guess-feedback'>\n            {correctGuesses.length > 0 && <p style={{ color: 'green' }}>Correct answers so far: {capitalizeText(correctGuesses)}</p>}\n            {incorrectGuesses.length > 0 && <p style={{ color: 'red' }}>Incorrect answers so far: {capitalizeText(incorrectGuesses)}</p>}\n            <br />\n            <p>{guessesRemainingText}</p>\n            <p>{countriesRemainingText}</p>\n            <br />\n        </div>\n    )\n}\n\nexport default borderingCountriesFeedback;\n","import React, { useState, useEffect } from 'react';\nimport allCountryStats from '../../helpers/allCountryDefaultStats';\n\nfunction BorderingCountriesStats(props) {\n    const updateStats = props.updateStatsCallback;\n    const country = props.country;\n    const numberOfGuesses = props.numberOfGuesses;\n    const succeeded = props.succeeded;\n\n    const [numberOfWins, setNumberOfWins] = useState(0);\n    const [numberOfAttempts, setNumberOfAttempts] = useState(0);\n    const [numberOfGames, setNumberOfGames] = useState(0);\n    const [numberOfCorrectAnswers, setNumberOfCorrectAnswers] = useState(0);\n    const [numberOfIncorrectAnswers, setNumberOfIncorrectAnswers] = useState(0);\n    const [streak, setStreak] = useState(0);\n    const [highScore, setHighScore] = useState(false);\n\n    const called = true;\n\n    useEffect(() => {\n        const {\n            numberOfWins, numberOfGames, numberOfAttempts, numberOfCorrectAnswers, numberOfIncorrectAnswers, streak,\n        } = updateStats();\n        setNumberOfWins(numberOfWins);\n        setNumberOfGames(numberOfGames);\n        setNumberOfAttempts(numberOfAttempts);\n        setNumberOfCorrectAnswers(numberOfCorrectAnswers);\n        setNumberOfIncorrectAnswers(numberOfIncorrectAnswers);\n        setStreak(streak);\n\n        try {\n            localStorage.setItem('numberOfBorderWins', JSON.stringify(numberOfWins));\n            localStorage.setItem('numberOfBorderGames', JSON.stringify(numberOfGames));\n            localStorage.setItem('numberOfBorderAttempts', JSON.stringify(numberOfAttempts));\n            localStorage.setItem('numberOfCorrectBorderAnswers', JSON.stringify(numberOfCorrectAnswers));\n            localStorage.setItem('numberOfIncorrectBorderAnswers', JSON.stringify(numberOfIncorrectAnswers));\n            localStorage.setItem('borderStreak', JSON.stringify(streak));\n\n            // TODO check this works for success and failure\n            const countryBordersHighScores = JSON.parse(localStorage.getItem('countryHighScores')) || allCountryStats;\n            if (succeeded) {\n                const previousBestScore = countryBordersHighScores[country].bestBorders;\n                if (!previousBestScore || numberOfGuesses < previousBestScore) {\n                    countryBordersHighScores[country].bestBorders = numberOfGuesses;\n                    setHighScore(true);\n                }\n            } else {\n                countryBordersHighScores[country].bestBorders = 99;\n            }\n            localStorage.setItem('countryHighScores', JSON.stringify(countryBordersHighScores));\n        } catch (error) {\n            console.log('Unable to update stats');\n        }\n    }, [called]);\n\n    return (\n        <div id='country-guesser-stats'>\n            {numberOfGames > 0 && numberOfAttempts > 0 && <div>\n                <h1>Stats</h1>\n                {succeeded && highScore && <p>That was your best score for {country}!</p>}\n                <p>Total games: {numberOfGames}</p>\n                <p>Number of wins: {numberOfWins}</p>\n                {numberOfWins > 0 && <p>Win percentage: {((numberOfWins / numberOfGames) * 100).toFixed(1)}%</p>}\n                {numberOfCorrectAnswers > 0 && <p>Average number of correct answers per game: {(numberOfCorrectAnswers / numberOfGames).toFixed(1)}</p>}\n                {numberOfIncorrectAnswers > 0 && <p>Average number of incorrect answers per game: {(numberOfIncorrectAnswers / numberOfGames).toFixed(1)}</p>}\n                {numberOfWins > 0 && streak > 0 && <p>You are on a {streak} game winning streak playing Bordering Countries</p>}\n            </div>}\n        </div>\n    );\n}\n\nexport default BorderingCountriesStats;\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport BorderingCountriesStats from '../borderingCountries/borderingCountriesStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesFailurePage(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const map = props.map;\n    const borderingCountries = props.borderingCountries;\n    const correctGuesses = props.correctGuesses;\n    const guesses = props.guesses;\n\n    const incorrectCount = guesses.length - correctGuesses.length;\n    const borderingCountriesCount = borderingCountries.length;\n    const missingAnswersArray = borderingCountries.filter(countryGuess => !correctGuesses.includes(countryGuess.toLowerCase()));\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfBorderWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfBorderGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfBorderAttempts')) || 0;\n        const numberOfCorrectAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers')) || 0;\n        const numberOfIncorrectAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            numberOfCorrectAnswers: numberOfCorrectAnswers + correctGuesses.length,\n            numberOfIncorrectAnswers: numberOfIncorrectAnswers + incorrectCount,\n            streak: 0,\n        };\n        return stats;\n    }\n\n    return (\n        <div id='failure-page'>\n            {borderingCountries && !newGameStarted && < div id='bordering-countries-failure' >\n                <p style={{ color: 'red' }}>You failed. Better luck next time</p>\n                <p>See {name} on the <a href={map}>map</a></p>\n                {correctGuesses.length === 0 && <p>You found none of the bordering countries and missed {borderingCountriesCount}</p>}\n                {correctGuesses.length > 0 && <p>You found {correctGuesses.length} of {borderingCountriesCount}</p>}\n                {correctGuesses.length > 0 && <p>You found: {capitalizeText(correctGuesses)}</p>}\n                {missingAnswersArray && <p>You missed: {capitalizeText(missingAnswersArray)}</p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <BorderingCountriesStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={false}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Try again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default BorderingCountriesFailurePage;\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport BorderingCountriesStats from './borderingCountriesStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesSuccessPage(props) {\n    const countriesInfo = props.countriesInfo;\n    const incorrectGuesses = props.incorrectGuesses;\n    const correctGuesses = props.correctGuesses;\n    const name = props.name;\n    const map = props.map;\n    const guesses = props.guesses;\n    const incorrectCount = incorrectGuesses.length;\n    const answerOrAnswers = incorrectCount === 1 ? 'answer' : 'answers';\n\n    const messageText = correctGuesses.length === 1\n        ? `Well done! You found the only bordering country of ${name} with ${incorrectCount} incorrect ${answerOrAnswers}`\n        : `Well done! You found the ${correctGuesses.length} bordering countries of ${name} with ${incorrectCount} incorrect answers`;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfBorderWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfBorderGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfBorderAttempts')) || 0;\n        const numberOfCorrectAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers')) || 0;\n        const numberOfIncorrectAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers')) || 0;\n        const streak = JSON.parse(localStorage.getItem('borderStreak')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins + 1,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            numberOfCorrectAnswers: numberOfCorrectAnswers + correctGuesses.length,\n            numberOfIncorrectAnswers: numberOfIncorrectAnswers + incorrectCount,\n            streak: streak + 1,\n        };\n        return stats;\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-bordering-countries-game' >\n                <h5 style={{ color: 'green' }}>{messageText}</h5>\n                <p>See <a href={map}>{name}</a> on the map</p>\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <BorderingCountriesStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={true}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Play again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default BorderingCountriesSuccessPage;\n","import React, { Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryForm(props) {\n    const possibleCountries = props.possibleCountries;\n    const value = props.value;\n    const setValue = props.setValue;\n    const handleSubmit = props.handleSubmit;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Fragment>\n                <Form.Group className='mb-3'>\n                    <Typeahead\n                        id='country-search'\n                        onChange={setValue}\n                        options={possibleCountries}\n                        placeholder='Select your country'\n                        selected={value}\n                    />\n                </Form.Group>\n            </Fragment>\n            <Button variant='primary' type='submit'>\n                Guess\n            </Button>\n        </Form>\n    )\n}\n\nexport default CountryForm;\n","import React from 'react';\n\nfunction BorderingCountriesClue(props) {\n    const clues = props.clues;\n\n    return (\n        <div id='country-initial-clue'>\n            {clues && <p>The remaining bordering countries begin with the following letters: {clues}</p>}\n        </div>\n    );\n}\n\nexport default BorderingCountriesClue;\n","function checkValidGuess(guessedName, possibleCountries, guesses) {\n    let isValidCountry = false;\n    let knownCountry = false;\n    let duplicateGuess = false;\n    if (guessedName.length > 0) {\n        possibleCountries.find(country => {\n            if (country.toLowerCase() === guessedName) {\n                knownCountry = true;\n                isValidCountry = true;\n            }\n            if (guesses.includes(guessedName)) {\n                duplicateGuess = true;\n            }\n        });\n    }\n    const returnObj = {\n        isValidCountry,\n        knownCountry,\n        duplicateGuess,\n    }\n    return returnObj;\n}\n\nexport default checkValidGuess;\n","import React, { useState, useEffect } from 'react';\nimport BasicValidation from '../basicValidation';\nimport BorderingCountriesFeedback from './borderingCountriesFeedback';\nimport BorderingCountriesFailurePage from './borderingCountriesFailurePage';\nimport BorderingCountriesSuccessPage from '../borderingCountries/borderingCountriesSuccessPage';\nimport CountryForm from '../countryForm';\nimport BorderingCountriesClue from './borderingCountriesClue';\nimport checkValidGuess from '../../helpers/countryValidation';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesGuesser(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const map = props.map;\n\n    const numberOfBorderingCountriesText = borderingCountries.length > 1\n        ? `There are ${borderingCountries.length} bordering countries to find in total`\n        : 'There is 1 bordering country to find';\n\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [correctLastGuess, setCorrectLastGuess] = useState(false);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState([]);\n    const [guessedActualCountry, setGuessedActualCountry] = useState(false);\n    const [clues, setClues] = useState();\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue([''])\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let { isValidCountry, knownCountry, duplicateGuess } = checkValidGuess(guessedName, possibleCountries, guesses);\n        setCorrectLastGuess(false);\n        if (guessedName === name.toLowerCase()) {\n            setGuessedActualCountry(true);\n            isValidCountry = false;\n        } else {\n            setGuessedActualCountry(false);\n        }\n        setKnownCountry(knownCountry);\n        setDuplicateGuess(duplicateGuess);\n        if (isValidCountry && knownCountry && !duplicateGuess) {\n            checkGuessIsCorrect(guessedName);\n        }\n    };\n\n    function checkGuessIsCorrect(guessedName) {\n        const lowerCaseBorderingCountryArray = borderingCountries.map(country => country.toLowerCase());\n        if (lowerCaseBorderingCountryArray.includes(guessedName)) {\n            setCorrectGuesses([...correctGuesses, guessedName]);\n            setCorrectLastGuess(true);\n            if (correctGuesses.length + 1 === borderingCountries.length) {\n                setSucceeded(true);\n            }\n        } else {\n            setIncorrectGuesses([...incorrectGuesses, guessedName]);\n            setIncorrectCount(incorrectCount + 1);\n            setCorrectLastGuess(false);\n        }\n        setGuesses([...guesses, guessedName]);\n    }\n\n    function findStartingLetterOfBorders() {\n        if (incorrectGuesses.length >= 4) {\n            const startingLetters = [];\n            borderingCountries.forEach((country) => {\n                if (!correctGuesses.includes(country.toLowerCase())) {\n                    const letter = country.charAt(0).toUpperCase();\n                    startingLetters.push(letter);\n                }\n            });\n            return capitalizeText(startingLetters);\n        }\n    }\n\n    useEffect(() => {\n        if (incorrectCount >= 6) {\n            setFailed(true);\n        }\n\n        const clues = findStartingLetterOfBorders();\n        setClues(clues);\n    })\n\n    return (\n        <div id='borders'>\n            {!succeeded && !failed && <div>\n                <h2>Bordering Countries</h2>\n                <p>Your country is: {name}</p>\n                <p>{numberOfBorderingCountriesText}</p>\n                <div id='borders-form'>\n                    <CountryForm\n                        possibleCountries={possibleCountries}\n                        value={value}\n                        setValue={setValue}\n                        handleSubmit={handleSubmit}\n                    />\n                </div>\n            </div>}\n            {guesses.length > 0 && !failed && !succeeded && <BorderingCountriesFeedback\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                incorrectCount={incorrectCount}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {!succeeded && !correctLastGuess && <div id='invalid-border-guess-feedback'>\n                <BasicValidation\n                    duplicateGuess={duplicateGuess}\n                    knownCountry={knownCountry}\n                />\n                {guessedActualCountry && <p style={{ color: 'brown' }}>That's the actual country! Guess the bordering ones instead</p>}\n            </div>}\n            {!succeeded && !failed && clues && <BorderingCountriesClue\n                clues={clues}\n            />}\n            {failed && !succeeded && <BorderingCountriesFailurePage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                correctGuesses={correctGuesses}\n                borderingCountries={borderingCountries}\n                guesses={guesses}\n            />}\n            {succeeded && <BorderingCountriesSuccessPage\n                countriesInfo={countriesInfo}\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                name={name}\n                map={map}\n                guesses={guesses}\n            />}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import React, { useState } from 'react';\nimport BorderingCountriesGuesser from '../borderingCountries/borderingCountriesGuesser';\nimport PlayButton from '../playButton';\nimport StartNewGame from '../startNewGame';\nimport CountryGuesserStats from '../countryGuesser/countryGuesserStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserSuccessPage(props) {\n    const countriesInfo = props.countriesInfo;\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const flag = props.flag;\n    const map = props.map;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [borderingCountriesGameStarted, setBorderingCountriesGameStarted] = useState(false);\n\n    function startBorderingCountriesGame() {\n        setBorderingCountriesGameStarted(true);\n        setNewGameStarted(true);\n    }\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n    }\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfAttempts')) || 0;\n        const streak = JSON.parse(localStorage.getItem('streak')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins + 1,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            streak: streak + 1,\n        };\n        return stats;\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-country-game' >\n                {incorrectCount === 0 && <h5 style={{ color: 'green' }}>Amazing! You got <a href={map}>{name}</a> in one!</h5>}\n                {incorrectCount > 0 && <h5 style={{ color: 'green' }}>Well done! It took you {incorrectCount + 1} attempts to get <a href={map}>{name}</a></h5>}\n                {incorrectCount > 0 && <p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <CountryGuesserStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={true}\n            />}\n            {!newGameStarted && borderingCountries.length > 0 && <PlayButton\n                callback={startBorderingCountriesGame}\n                buttonText='Guess the bordering countries'\n            />}\n            {!borderingCountriesGameStarted && <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Play again'\n                callback={startNewGame}\n            />}\n            {newGameStarted && borderingCountriesGameStarted && <BorderingCountriesGuesser\n                countriesInfo={countriesInfo}\n                name={name}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n                map={map}\n            />}\n        </div>\n    )\n}\n\nexport default CountryGuesserSuccessPage;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuessFeedback(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const duplicateGuess = props.duplicateGuess;\n    const guessedBorderingCountry = props.guessedBorderingCountry;\n\n    return (\n        <div id='country-guess-feedback'>\n            {!duplicateGuess && <p style={{ color: 'red' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n            {guessedBorderingCountry && <p>You're getting close!</p>}\n            {<p>Your answers so far: {capitalizeText(guesses)}</p>}\n        </div>\n    )\n}\n\nexport default CountryGuessFeedback;\n","import React, { useState, useEffect } from 'react';\nimport CountryGuesserFailurePage from './countryGuesserFailurePage';\nimport CountryGuesserSuccessPage from './countryGuesserSuccessPage';\nimport BasicValidation from '../basicValidation';\nimport CountryGuessFeedback from './countryGuesserFeedback';\nimport CountryForm from '../countryForm';\nimport checkValidGuess from '../../helpers/countryValidation';\n\nfunction CountryGuesser(props) {\n    const countriesInfo = props.countriesInfo;\n    const country = props.country;\n    const possibleCountries = props.possibleCountries;\n\n    const name = country.name;\n    const population = country.population;\n    const flag = country.flag;\n    const landlocked = country.landlocked;\n    const region = country.region;\n    const subregion = country.subregion;\n    const map = country.map;\n    const capital = country.capital;\n    const borderingCountries = country.borderingCountries;\n    // console.log(name) // TODO delete\n    // console.log(borderingCountries) // TODO delete\n\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState(['']);\n    const [guessedBorderingCountry, setGuessedBorderingCountry] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue(['']);\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        const { isValidCountry, knownCountry, duplicateGuess } = checkValidGuess(guessedName, possibleCountries, guesses);\n        setKnownCountry(knownCountry);\n        setDuplicateGuess(duplicateGuess);\n        if (isValidCountry && knownCountry && !duplicateGuess) {\n            checkGuessIsCorrect(guessedName);\n        }\n    };\n\n    function checkGuessIsCorrect(guessedName) {\n        setKnownCountry(true);\n        setDuplicateGuess(false);\n        if (guessedName === name.toLowerCase()) {\n            setCorrectGuess(true);\n        } else {\n            setIncorrectCount(incorrectCount + 1)\n            setCorrectGuess(false);\n            isGuessBorderingCountry(guessedName);\n        }\n        setGuesses([...guesses, guessedName]);\n    }\n\n    function isGuessBorderingCountry(guessedName) {\n        if (!correctGuess && borderingCountries.find(country => country.toLowerCase() === guessedName)) {\n            setGuessedBorderingCountry(true);\n        } else {\n            setGuessedBorderingCountry(false);\n        }\n    }\n\n    useEffect(() => {\n        if (incorrectCount >= 6) {\n            setFailed(true);\n        }\n    })\n\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Mystery Country</h2>\n                {<p>Population = {population}</p>}\n                {incorrectCount >= 1 && <p>Region = {region}</p>}\n                {incorrectCount >= 2 && <p>{landlocked}</p>}\n                {incorrectCount >= 3 && <p>Sub region = {subregion}</p>}\n                {incorrectCount >= 4 && <div>\n                    <p>Flag: </p>\n                    {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n                </div>}\n                {incorrectCount >= 5 && <p>Capital city = {capital}</p>}\n            </div>}\n            <div id='country-form'>\n                {!correctGuess && !failed && <CountryForm\n                    possibleCountries={possibleCountries}\n                    value={value}\n                    setValue={setValue}\n                    handleSubmit={handleSubmit}\n                />}\n            </div>\n            <BasicValidation\n                duplicateGuess={duplicateGuess}\n                knownCountry={knownCountry}\n            />\n            {!correctGuess && guesses.length > 0 && !failed && <CountryGuessFeedback\n                guesses={guesses}\n                incorrectCount={incorrectCount}\n                duplicateGuess={duplicateGuess}\n                guessedBorderingCountry={guessedBorderingCountry}\n            />}\n            {correctGuess && !failed && <CountryGuesserSuccessPage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                flag={flag}\n                incorrectCount={incorrectCount}\n                guesses={guesses}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n            />}\n            {failed && <CountryGuesserFailurePage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                flag={flag}\n                guesses={guesses}\n            />}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import axios from 'axios';\nimport { capitalizeText, numberWithCommas } from './utils';\n\nasync function allCountriesRequest() {\n  try {\n    const response = await axios.get(`https://restcountries.com/v3.1/all`);\n    const body = response.data;\n\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        const code = country.cca3;\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const returnObject = {\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n      responseBody: body,\n    }\n    return returnObject;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function selectCountry(countriesArray, countriesResponse, countryCodeMapping) {\n  const selectedCountry = countriesArray[Math.floor(Math.random() * countriesArray.length)];\n  // const selectedCountry = 'France'; // TODO revert\n  const country = countriesResponse.find(country => country.name.common.toLowerCase() === selectedCountry.toLowerCase());\n  const countryObj = {\n    name: country.name.common,\n    borderingCountries: returnBorderingCountries(country.borders, countryCodeMapping),\n    capital: capitalizeText(country.capital),\n    landlocked: country.landlocked ? 'The country is landlocked' : 'The country has a coastline',\n    map: country.maps.googleMaps,\n    population: numberWithCommas(country.population),\n    flag: country.flags.png,\n    region: country.region,\n    subregion: country.subregion,\n  };\n  return countryObj;\n}\n\n\nfunction returnBorderingCountries(borderingCountries, countryCodeMapping) {\n  const answerCountries = [];\n  if (borderingCountries) {\n    borderingCountries.forEach(borderingCountry => {\n      countryCodeMapping.find(country => {\n        if (country.code === borderingCountry) {\n          answerCountries.push(country.name);\n        }\n      })\n    });\n  }\n  return answerCountries;\n}\n\nexport default allCountriesRequest;\n","import React from 'react';\nimport CountryGuesser from './countryGuesser/countryGuesser';\nimport { selectCountry } from '../helpers/countryHelper';\n\nfunction Country(props) {\n  const countriesInfo = props.countriesInfo;\n\n  const countryCodeMapping = countriesInfo.countryCodeMapping\n  const possibleCountries = countriesInfo.countriesArray;\n  const allCountriesResponseBody = countriesInfo.responseBody;\n  const country = selectCountry(possibleCountries, allCountriesResponseBody, countryCodeMapping);\n\n  return (\n    <div id='country'>\n      {country && <CountryGuesser\n        countriesInfo={countriesInfo}\n        country={country}\n        possibleCountries={possibleCountries}\n      />}\n    </div >\n  );\n}\n\nexport default Country;\n","import React, { useState, useEffect } from 'react';\nimport Country from './components/country';\nimport getAllCountriesRequest from './helpers/countryHelper';\n\nfunction App() {\n  const [allCountriesResponse, setAllCountriesResponse] = useState();\n  const [foundCountry, setFindCountry] = useState(false);\n\n  useEffect(() => {\n    if (!foundCountry) {\n      getAllCountriesRequest()\n        .then(allCountriesResponse => {\n          setFindCountry(true);\n          setAllCountriesResponse(allCountriesResponse);\n        });\n    }\n  });\n\n  return (\n    <div id='app'>\n      <h1>FUN WITH COUNTRIES!</h1>\n      {allCountriesResponse && <Country\n        countriesInfo={allCountriesResponse}\n      />}\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}