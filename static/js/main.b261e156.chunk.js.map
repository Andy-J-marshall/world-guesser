{"version":3,"sources":["components/playButton.js","helpers/allCountriesRequest.js","helpers/utils.js","components/resultPages/failurePage.js","components/guessFeedback/basicValidation.js","components/guessFeedback/borderingCountriesFeedback.js","components/resultPages/borderingCountriesSuccessPage.js","components/countryForm.js","components/borderingCountriesGuesser.js","components/resultPages/countryGuesserSuccessPage.js","components/guessFeedback/countryGuessFeedback.js","components/countryGuesser.js","components/country.js","App.js","index.js"],"names":["PlayButton","props","callback","buttonText","id","Button","variant","size","onClick","a","axios","get","response","body","data","countriesArray","countryCodeMapping","extraCountries","forEach","country","name","common","unMember","independent","includes","push","countryMappingObj","code","cca3","selectCountry","returnObject","sort","console","log","countriesResponse","selectedCountry","Math","floor","random","length","find","toLowerCase","borders","capital","landlocked","map","maps","googleMaps","population","flags","png","region","subregion","allCountriesRequest","capitalizeText","stringArray","stringArrayAsString","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","FailurePage","borderingCountriesCount","missingAnswersArray","flag","borderingCountries","correctGuesses","guesses","filter","countryGuess","useState","newGameStarted","setNewGameStarted","allCountriesResponse","setAllCountriesResponse","getAllCountriesRequest","style","color","href","border","src","alt","countriesInfo","basicValidation","duplicateGuess","knownCountry","borderingCountriesFeedback","incorrectGuesses","incorrectCount","guessesRemainingCount","guessesRemainingText","countriesRemainingCount","countriesRemainingText","BorderingCountriesSuccessPage","answerOrAnswers","messageText","CountryForm","possibleCountries","value","setValue","handleSubmit","Form","onSubmit","Group","className","onChange","options","placeholder","selected","type","borderingCountriesGuesser","numberOfBorderingCountriesText","setCorrectGuesses","correctLastGuess","setCorrectLastGuess","setIncorrectGuesses","setIncorrectCount","setGuesses","setDuplicateGuess","failed","setFailed","succeeded","setSucceeded","setKnownCountry","guessedActualCountry","setGuessedActualCountry","event","preventDefault","guessedName","target","trim","isValidCountry","CountryGuesserSuccessPage","borderingCountriesGameStarted","setBorderingCountriesGameStarted","newCountryFinderGameStarted","setNewCountryFinderGameStarted","CountryGuesser","guessAttempted","setGuessAttempted","correctGuess","setCorrectGuess","Country","number","toString","answerCountries","borderingCountry","returnBorderingCountries","App","foundCountry","setFindCountry","useEffect","then","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b261e156.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nfunction PlayButton(props) {\n    const callback = props.callback;\n    const buttonText = props.buttonText;\n\n    return (\n        <div id='new-game-button'>\n            <Button variant='primary' size='lg' onClick={callback}>{buttonText}</Button>\n        </div>\n    );\n}\n\nexport default PlayButton;\n","import axios from 'axios';\n\n// https://restcountries.com/\n\nasync function allCountriesRequest() {\n  try {\n    const response = await axios.get(`https://restcountries.com/v3.1/all`);\n    const body = response.data;\n\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        const code = country.cca3;\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const country = selectCountry(countriesArray, body);\n\n    const returnObject = {\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n      country,\n    }\n    return returnObject;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction selectCountry(countriesArray, countriesResponse) {\n  const selectedCountry = countriesArray[Math.floor(Math.random() * countriesArray.length)];\n  const country = countriesResponse.find(country => country.name.common.toLowerCase() === selectedCountry.toLowerCase());\n  const countryObj = {\n    name: country.name.common,\n    borders: country.borders,\n    capital: country.capital,\n    landlocked: country.landlocked,\n    map: country.maps.googleMaps,\n    population: country.population,\n    flags: country.flags.png,\n    region: country.region,\n    subregion: country.subregion,\n  };\n  return countryObj;\n}\n\nexport default allCountriesRequest;\n","export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] = array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        })\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString = index === 0 ? capitalizedString : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n\nexport function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n","import React, { useState } from 'react';\nimport Country from '../country';\nimport PlayButton from '../playButton';\nimport getAllCountriesRequest from '../../helpers/allCountriesRequest';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction FailurePage(props) {\n    const name = props.name;\n    const flag = props.flag;\n    const map = props.map;\n    const borderingCountries = props.borderingCountries;\n    const correctGuesses = props.correctGuesses;\n    const guesses = props.guesses;\n\n    let borderingCountriesCount;\n    let missingAnswersArray;\n    if (borderingCountries) {\n        borderingCountriesCount = borderingCountries.length;\n        missingAnswersArray = borderingCountries.filter(countryGuess => !correctGuesses.includes(countryGuess.toLowerCase()));\n    }\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div id='failure-page'>\n            {!newGameStarted && <p style={{ color: 'red' }}>Unlucky, better luck next time</p>}\n            {!borderingCountries && !newGameStarted && < div id='country-failure' >\n                {<p>The answer was <a href={map}>{name}</a></p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                <img style={{ border: 'solid' }} src={flag} alt='Country Flag' />\n            </div >}\n\n            {borderingCountries && !newGameStarted && < div id='bordering-countries-failure' >\n                {!correctGuesses && <p>You found none of the {borderingCountriesCount} bordering countries</p>}\n                {correctGuesses && correctGuesses.length > 0 && <p>You found {correctGuesses.length} bordering countries out of {borderingCountriesCount}</p>}\n                {correctGuesses && correctGuesses.length > 0 && <p>You found: {capitalizeText(correctGuesses)}</p>}\n                {missingAnswersArray && <p>You missed: {capitalizeText(missingAnswersArray)}</p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<p>See {name} on the <a href={map}>map</a></p>}\n            </div >}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Try again'\n            />}\n            {newGameStarted && allCountriesResponse && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default FailurePage;\n","import React from 'react';\n\nfunction basicValidation(props) {\n    const duplicateGuess = props.duplicateGuess;\n    const knownCountry = props.knownCountry;\n\n    return (\n        <div style={{ color: 'brown' }} id='invalid-guess-feedback'>\n            {duplicateGuess && <p>You've already tried that country!</p>}\n            {!knownCountry && <p>Enter a valid country name</p>}\n        </div>\n    )\n}\n\nexport default basicValidation;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesFeedback(props) {\n    const correctGuesses = props.correctGuesses;\n    const incorrectGuesses = props.incorrectGuesses;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const incorrectCount = props.incorrectCount;\n\n    const guessesRemainingCount = 6 - incorrectCount;\n    const guessesRemainingText = incorrectCount >= 5\n        ? `You have ${guessesRemainingCount} life remaining`\n        : `You have ${guessesRemainingCount} lives remaining`;\n\n    const countriesRemainingCount = borderingCountriesCount - correctGuesses.length;\n    const countriesRemainingText = correctGuesses.length === borderingCountriesCount - 1\n        ? `There is ${countriesRemainingCount} bordering country remaining`\n        : `There are ${countriesRemainingCount} bordering countries remaining`;\n\n    return (\n        <div id='bordering-countries-guess-feedback'>\n            {/* TODO make a bigger deal about correct and incorrect guesses e.g. colours etc. */}\n            {correctGuesses.length > 0 && <p>Correct answers so far: {capitalizeText(correctGuesses)}</p>}\n            {incorrectGuesses.length > 0 && <p>Incorrect answers so far: {capitalizeText(incorrectGuesses)}</p>}\n            <br />\n            <p>{guessesRemainingText}</p>\n            <p>{countriesRemainingText}</p>\n        </div>\n    )\n}\n\nexport default borderingCountriesFeedback;\n","import React, { useState } from 'react';\nimport Country from '../country';\nimport PlayButton from '../playButton';\nimport getAllCountriesRequest from '../../helpers/allCountriesRequest';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesSuccessPage(props) {\n    const incorrectGuesses = props.incorrectGuesses;\n    const correctGuesses = props.correctGuesses;\n    const name = props.name;\n    const map = props.map;\n    const guesses = props.guesses;\n    const incorrectCount = incorrectGuesses.length;\n    const answerOrAnswers = incorrectCount === 1 ? 'answer' : 'answers';\n\n    const messageText = correctGuesses.length === 1\n        ? `Well done! You found the only bordering country of ${name} with ${incorrectCount} incorrect ${answerOrAnswers}`\n        : `Well done! You found the ${correctGuesses.length} bordering countries of ${name} with ${incorrectCount} incorrect answers`;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-bordering-countries-game' >\n                <h5 style={{ color: 'green' }}>{messageText}</h5>\n                <p>See <a href={map}>{name}</a> on the map</p>\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Play again'\n            />}\n            {newGameStarted && allCountriesResponse && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default BorderingCountriesSuccessPage;\n","import React, { Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryForm(props) {\n    const possibleCountries = props.possibleCountries;\n    const value = props.value;\n    const setValue = props.setValue;\n    const handleSubmit = props.handleSubmit;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Fragment>\n                <Form.Group className='mb-3'>\n                    <Typeahead\n                        id='country-search'\n                        onChange={setValue}\n                        options={possibleCountries}\n                        placeholder='Select your country'\n                        selected={value}\n                    />\n                </Form.Group>\n            </Fragment>\n            <Button variant='primary' type='submit'>\n                Guess\n            </Button>\n        </Form>\n    )\n}\n\nexport default CountryForm;\n","import React, { useState } from 'react';\nimport BasicValidation from './guessFeedback/basicValidation';\nimport BorderingCountriesFeedback from './guessFeedback/borderingCountriesFeedback';\nimport FailurePage from './resultPages/failurePage';\nimport BorderingCountriesSuccessPage from './resultPages/borderingCountriesSuccessPage';\nimport CountryForm from './countryForm';\n\nfunction borderingCountriesGuesser(props) {\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const map = props.map;\n\n    const numberOfBorderingCountriesText = borderingCountries.length > 1\n        ? `There are ${borderingCountries.length} bordering countries to find`\n        : 'There is 1 bordering country to find';\n\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [correctLastGuess, setCorrectLastGuess] = useState(false);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState([]);\n    const [guessedActualCountry, setGuessedActualCountry] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue([''])\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n\n        if (guessedName.length > 0) {\n            if (guessedName === name.toLowerCase()) {\n                setGuessedActualCountry(true);\n                setCorrectLastGuess(false);\n            } else {\n                setGuessedActualCountry(false);\n                possibleCountries.find(country => {\n                    if (country.toLowerCase() === guessedName) {\n                        setKnownCountry(true);\n                        isValidCountry = true;\n                    } else {\n                        setDuplicateGuess(false);\n                        setKnownCountry(false);\n                    }\n                });\n            }\n        } else {\n            setKnownCountry(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                const lowerCaseBorderingCountryArray = borderingCountries.map(country => country.toLowerCase());\n                if (lowerCaseBorderingCountryArray.includes(guessedName)) {\n                    setCorrectGuesses([...correctGuesses, guessedName]);\n                    setCorrectLastGuess(true);\n                    if (correctGuesses.length + 1 === borderingCountries.length) {\n                        setSucceeded(true);\n                    }\n                } else {\n                    setIncorrectGuesses([...incorrectGuesses, guessedName]);\n                    setIncorrectCount(incorrectCount + 1);\n                    setCorrectLastGuess(false);\n                    if (incorrectCount >= 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    return (\n        <div id='borders'>\n            {!succeeded && !failed && <div>\n                <h2>Bordering Countries</h2>\n                <p>Your country is: {name}</p>\n                <p>{numberOfBorderingCountriesText}</p>\n                <div id='borders-form'>\n                    <CountryForm\n                        possibleCountries={possibleCountries}\n                        value={value}\n                        setValue={setValue}\n                        handleSubmit={handleSubmit}\n                    />\n                </div>\n            </div>}\n            {guesses.length > 0 && !failed && !succeeded && <BorderingCountriesFeedback\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                incorrectCount={incorrectCount}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {!succeeded && !correctLastGuess && <div id='invalid-border-guess-feedback'>\n                <BasicValidation\n                    duplicateGuess={duplicateGuess}\n                    knownCountry={knownCountry}\n                />\n                {guessedActualCountry && <p style={{ color: 'brown' }}>That's the actual country! Guess the bordering ones instead</p>}\n            </div>}\n            {failed && !succeeded && <FailurePage\n                name={name}\n                map={map}\n                correctGuesses={correctGuesses}\n                borderingCountries={borderingCountries}\n                guesses={guesses}\n            />}\n            {succeeded && <BorderingCountriesSuccessPage\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                name={name}\n                map={map}\n                guesses={guesses}\n            />}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import React, { useState } from 'react';\nimport BorderingCountriesGuesser from '../borderingCountriesGuesser';\nimport PlayButton from '../playButton';\nimport Country from '../country';\nimport getAllCountriesRequest from '../../helpers/allCountriesRequest';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserSuccessPage(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const flag = props.flag;\n    const map = props.map;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [borderingCountriesGameStarted, setBorderingCountriesGameStarted] = useState(false);\n    const [newCountryFinderGameStarted, setNewCountryFinderGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    function startBorderingCountriesGame() {\n        setBorderingCountriesGameStarted(true);\n        setNewGameStarted(true);\n    }\n\n    async function startNewGame() {\n        setNewCountryFinderGameStarted(true);\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-country-game' >\n                {incorrectCount === 0 && <h5 style={{ color: 'green' }}>Amazing! You got <a href={map}>{name}</a> in one!</h5>}\n                {incorrectCount > 0 && <h5 style={{ color: 'green' }}>Well done! It took you {incorrectCount + 1} attempts to get <a href={map}>{name}</a></h5>}\n                {incorrectCount > 0 && <p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n            </div >}\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && borderingCountries.length > 0 && <PlayButton\n                callback={startBorderingCountriesGame}\n                buttonText='Guess the bordering countries'\n            />}\n            {newGameStarted && borderingCountriesGameStarted && <BorderingCountriesGuesser\n                name={name}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n                map={map}\n            />}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Play again'\n            />}\n            {newGameStarted && allCountriesResponse && newCountryFinderGameStarted && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default CountryGuesserSuccessPage;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction duplicateGuess(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const duplicateGuess = props.duplicateGuess;\n\n    return (\n        <div id='country-guess-feedback'>\n            {!duplicateGuess && <p style={{ color: 'red' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n            {<p>Your answers so far: {capitalizeText(guesses)}</p>}\n        </div>\n    )\n}\n\nexport default duplicateGuess;\n","import React, { useState } from 'react';\nimport FailurePage from './resultPages/failurePage';\nimport CountryGuesserSuccessPage from './resultPages/countryGuesserSuccessPage';\nimport BasicValidation from './guessFeedback/basicValidation';\nimport CountryGuessFeedback from './guessFeedback/countryGuessFeedback';\nimport CountryForm from './countryForm';\n\nfunction CountryGuesser(props) {\n    const name = props.name;\n    const population = props.population;\n    const flag = props.flag;\n    const landlocked = props.landlocked;\n    const region = props.region;\n    const subregion = props.subregion;\n    const map = props.map;\n    const capital = props.capital;\n    const possibleCountries = props.possibleCountries;\n    const borderingCountries = props.borderingCountries;\n\n    const [guessAttempted, setGuessAttempted] = useState(false);\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState(['']);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue(['']);\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n        if (guessedName.length > 0) {\n            possibleCountries.find(country => {\n                if (country.toLowerCase() === guessedName) {\n                    setKnownCountry(true);\n                    isValidCountry = true;\n                } else {\n                    setDuplicateGuess(false);\n                    setGuessAttempted(false);\n                    setKnownCountry(false);\n                }\n            });\n        } else {\n            setKnownCountry(false);\n            setGuessAttempted(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                setGuessAttempted(true);\n                if (guessedName === name.toLowerCase()) {\n                    setCorrectGuess(true);\n                } else {\n                    setIncorrectCount(incorrectCount + 1)\n                    setCorrectGuess(false);\n                    if (incorrectCount >= 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Mystery Country</h2>\n                {<p>Population = {population}</p>}\n                {incorrectCount >= 1 && <p>Region = {region}</p>}\n                {incorrectCount >= 2 && <p>{landlocked}</p>}\n                {incorrectCount >= 3 && <p>Sub region = {subregion}</p>}\n                {incorrectCount >= 4 && <div>\n                    <p>Flag: </p>\n                    {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n                </div>}\n                {incorrectCount >= 5 && <p>Capital city/cities = {capital}</p>}\n            </div>}\n            <div id='country-form'>\n                {!correctGuess && !failed && <CountryForm\n                    possibleCountries={possibleCountries}\n                    value={value}\n                    setValue={setValue}\n                    handleSubmit={handleSubmit}\n                />}\n            </div>\n            <BasicValidation\n                duplicateGuess={duplicateGuess}\n                knownCountry={knownCountry}\n            />\n            {!correctGuess && guessAttempted && !failed && <CountryGuessFeedback\n                guesses={guesses}\n                incorrectCount={incorrectCount}\n                duplicateGuess={duplicateGuess}\n            />}\n            {correctGuess && !failed && <CountryGuesserSuccessPage\n                name={name}\n                map={map}\n                flag={flag}\n                incorrectCount={incorrectCount}\n                guesses={guesses}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n            />}\n            {failed && <FailurePage\n                name={name}\n                map={map}\n                flag={flag}\n                guesses={guesses}\n            />}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import React from 'react';\nimport CountryGuesser from './countryGuesser';\nimport { capitalizeText, numberWithCommas } from '../helpers/utils';\n\nfunction Country(props) {\n  const countriesInfo = props.countriesInfo;\n\n  const countryCodeMapping = countriesInfo.countryCodeMapping\n  const possibleCountries = countriesInfo.countriesArray;\n  const country = countriesInfo.country;\n\n  function returnBorderingCountries(borderingCountries) {\n    const answerCountries = [];\n    if (borderingCountries) {\n      borderingCountries.forEach(borderingCountry => {\n        countryCodeMapping.find(country => {\n          if (country.code === borderingCountry) {\n            answerCountries.push(country.name);\n          }\n        })\n      });\n    }\n    return answerCountries;\n  }\n\n  return (\n    <div id='country'>\n      {country && <CountryGuesser\n        name={country.name}\n        population={numberWithCommas(country.population)}\n        flag={country.flags}\n        landlocked={country.landlocked ? 'Country is landlocked' : 'Country is not landlocked'}\n        region={country.region}\n        subregion={country.subregion}\n        map={country.map}\n        capital={capitalizeText(country.capital)}\n        borderingCountries={returnBorderingCountries(country.borders)}\n        possibleCountries={possibleCountries}\n      />}\n    </div >\n  );\n}\n\nexport default Country;\n","import React, { useState, useEffect } from 'react';\nimport Country from './components/country';\nimport getAllCountriesRequest from './helpers/allCountriesRequest';\n\n// TODO tidy up CSS for whole app\n// TODO change favicon\nfunction App() {\n  const [allCountriesResponse, setAllCountriesResponse] = useState();\n  const [foundCountry, setFindCountry] = useState(false);\n\n  useEffect(() => {\n    if (!foundCountry) {\n      getAllCountriesRequest()\n        .then(allCountriesResponse => {\n          setFindCountry(true);\n          setAllCountriesResponse(allCountriesResponse);\n        });\n    }\n  });\n\n  return (\n    <div id='app'>\n      <h1>FUN WITH COUNTRIES!</h1>\n      {allCountriesResponse && <Country\n        countriesInfo={allCountriesResponse}\n      />}\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}