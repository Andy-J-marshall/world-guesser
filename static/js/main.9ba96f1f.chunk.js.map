{"version":3,"sources":["components/playButton.js","restHelpers/allCountriesRequest.js","components/resultPages/failurePage.js","components/guessFeedback/basicValidation.js","components/guessFeedback/borderingCountriesFeedback.js","components/resultPages/borderingCountriesSuccessPage.js","components/borderingCountriesGuesser.js","components/resultPages/countryGuesserSuccessPage.js","components/guessFeedback/countryGuessFeedback.js","components/countryGuesser.js","components/country.js","App.js","index.js"],"names":["PlayButton","props","callback","buttonText","id","Button","variant","size","onClick","a","axios","get","response","body","data","countriesArray","countryCodeMapping","extraCountries","forEach","country","name","common","unMember","independent","includes","push","countryMappingObj","code","cca3","selectCountry","returnObject","sort","console","log","countriesResponse","selectedCountry","Math","floor","random","length","find","toLowerCase","borders","capital","landlocked","map","maps","googleMaps","population","flags","png","region","subregion","allCountriesRequest","FailurePage","flag","borderingCountriesCount","correctGuesses","useState","newGameStarted","setNewGameStarted","allCountriesResponse","setAllCountriesResponse","getAllCountriesRequest","style","color","href","border","src","alt","toString","countriesInfo","basicValidation","duplicateGuess","knownCountry","borderingCountriesFeedback","incorrectGuesses","incorrectCount","guessesRemainingCount","guessesRemainingText","countriesRemainingCount","countriesRemainingText","BorderingCountriesSuccessPage","messageText","borderingCountriesGuesser","borderingCountries","possibleCountries","numberOfBorderingCountriesText","setCorrectGuesses","correctLastGuess","setCorrectLastGuess","setIncorrectGuesses","setIncorrectCount","guesses","setGuesses","setDuplicateGuess","failed","setFailed","succeeded","setSucceeded","setKnownCountry","setSelectCountry","guessedActualCountry","setGuessedActualCountry","Form","onSubmit","event","preventDefault","guessedName","target","value","trim","isValidCountry","Group","className","onChange","options","placeholder","selected","type","CountryGuesserSuccessPage","borderingCountriesGameStarted","setBorderingCountriesGameStarted","newCountryFinderGameStarted","setNewCountryFinderGameStarted","CountryGuesser","guessAttempted","setGuessAttempted","correctGuess","setCorrectGuess","Country","number","replace","answerCountries","borderingCountry","returnBorderingCountries","App","foundCountry","setFindCountry","useEffect","then","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ba96f1f.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nfunction PlayButton(props) {\n    const callback = props.callback;\n    const buttonText = props.buttonText;\n\n    return (\n        <div id='new-game-button'>\n            <Button variant='primary' size='lg' onClick={callback}>{buttonText}</Button>\n        </div>\n    );\n}\n\nexport default PlayButton;\n","import axios from 'axios';\n\n// https://restcountries.com/\n\nasync function allCountriesRequest() {\n  try {\n    const response = await axios.get(`https://restcountries.com/v3.1/all`);\n    const body = response.data;\n\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        const code = country.cca3;\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const country = selectCountry(countriesArray, body);\n\n    const returnObject = {\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n      country,\n    }\n    return returnObject;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction selectCountry(countriesArray, countriesResponse) {\n  const selectedCountry = countriesArray[Math.floor(Math.random() * countriesArray.length)];\n  const country = countriesResponse.find(country => country.name.common.toLowerCase() === selectedCountry.toLowerCase());\n  const countryObj = {\n    name: country.name.common,\n    borders: country.borders,\n    capital: country.capital,\n    landlocked: country.landlocked,\n    map: country.maps.googleMaps,\n    population: country.population,\n    flags: country.flags.png,\n    region: country.region,\n    subregion: country.subregion,\n  };\n  return countryObj;\n}\n\nexport default allCountriesRequest;\n","import React, { useState } from 'react';\nimport Country from '../country';\nimport PlayButton from '../playButton';\nimport getAllCountriesRequest from '../../restHelpers/allCountriesRequest';\n\nfunction FailurePage(props) {\n    const name = props.name;\n    const flag = props.flag;\n    const map = props.map;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const correctGuesses = props.correctGuesses;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div id='failure-page'>\n            {!newGameStarted && <p style={{ color: 'red' }}>YOU LOST</p>}\n            {!borderingCountriesCount && !newGameStarted && < div id='country-failure' >\n                {<p>The answer was <a href={map}>{name}</a></p>}\n                <img style={{ border: 'solid' }} src={flag} alt='Country Flag' />\n            </div >}\n\n            {borderingCountriesCount && !newGameStarted && < div id='bordering-countries-failure' >\n                {/* TODO add this in: The missing countries were {guesses.filter(countryGuess => !answerCountries.includes(countryGuess)} */}\n                <p>You found {correctGuesses.length} bordering countries out of {borderingCountriesCount}.</p>\n                {correctGuesses.length > 0 && <p>Countries found: {correctGuesses.toString()}</p>}\n                {<p>See {name} on the <a href={map}>map</a></p>}\n            </div >}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Try again'\n            />}\n            {newGameStarted && allCountriesResponse && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default FailurePage;\n","import React from 'react';\n\nfunction basicValidation(props) {\n    const duplicateGuess = props.duplicateGuess;\n    const knownCountry = props.knownCountry;\n\n    return (\n        <div style={{ color: 'brown' }} id='invalid-guess-feedback'>\n            {duplicateGuess && <p>You've already tried that country!</p>}\n            {!knownCountry && <p>Enter a valid country name</p>}\n        </div>\n    )\n}\n\nexport default basicValidation;\n","import React from 'react';\n\nfunction borderingCountriesFeedback(props) {\n    const correctGuesses = props.correctGuesses;\n    const incorrectGuesses = props.incorrectGuesses;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const incorrectCount = props.incorrectCount;\n\n    const guessesRemainingCount = 6 - incorrectCount;\n    const guessesRemainingText = incorrectCount >= 5\n        ? `You have ${guessesRemainingCount} life remaining`\n        : `You have ${guessesRemainingCount} lives remaining`;\n\n    const countriesRemainingCount = borderingCountriesCount - correctGuesses.length;\n    const countriesRemainingText = correctGuesses.length === borderingCountriesCount - 1\n        ? `There is ${countriesRemainingCount} bordering country remaining`\n        : `There are ${countriesRemainingCount} bordering countries remaining`;\n\n    return (\n        <div id='bordering-countries-guess-feedback'>\n            {/* TODO make a bigger deal about correct and incorrect guesses e.g. colours etc. */}\n            {correctGuesses.length > 0 && <p>Correct guesses so far: {correctGuesses.toString()}</p>}\n            {incorrectGuesses.length > 0 && <p>Incorrect guesses so far: {incorrectGuesses.toString()}</p>}\n            <br />\n            <p>{guessesRemainingText}</p>\n            <p>{countriesRemainingText}</p>\n        </div>\n    )\n}\n\nexport default borderingCountriesFeedback;\n","import React, { useState } from 'react';\nimport Country from '../country';\nimport PlayButton from '../playButton';\nimport getAllCountriesRequest from '../../restHelpers/allCountriesRequest';\n\nfunction BorderingCountriesSuccessPage(props) {\n    const incorrectGuesses = props.incorrectGuesses;\n    const correctGuesses = props.correctGuesses;\n    const name = props.name;\n    const map = props.map;\n    const incorrectCount = incorrectGuesses.length;\n\n    const messageText = correctGuesses.length === 1\n        ? `Well done! You found the only bordering country of ${name} with 1 incorrect answer`\n        : `Well done! You found the ${correctGuesses.length} bordering countries of ${name} with ${incorrectCount} incorrect answers`;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-bordering-countries-game' >\n                <h5>{messageText}</h5>\n                <p>See <a href={map}>{name}</a> on the map</p>\n            </div >}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Play again'\n            />}\n            {newGameStarted && allCountriesResponse && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default BorderingCountriesSuccessPage;\n","import React, { Fragment, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport BasicValidation from './guessFeedback/basicValidation';\nimport BorderingCountriesFeedback from './guessFeedback/borderingCountriesFeedback';\nimport FailurePage from './resultPages/failurePage';\nimport BorderingCountriesSuccessPage from './resultPages/borderingCountriesSuccessPage';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction borderingCountriesGuesser(props) {\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const map = props.map;\n\n    const numberOfBorderingCountriesText = borderingCountries.length > 1\n        ? `There are ${borderingCountries.length} bordering countries to find`\n        : 'There is 1 bordering country to find';\n\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [correctLastGuess, setCorrectLastGuess] = useState(false);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [selectCountry, setSelectCountry] = useState([]);\n    const [guessedActualCountry, setGuessedActualCountry] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n\n        // TODO this is really messy\n        if (guessedName.length > 0) {\n            if (guessedName === name.toLowerCase()) {\n                setGuessedActualCountry(true);\n                setCorrectLastGuess(false);\n            } else {\n                setGuessedActualCountry(false);\n                possibleCountries.find(country => {\n                    if (country.toLowerCase() === guessedName) {\n                        setKnownCountry(true);\n                        isValidCountry = true;\n                    } else {\n                        setDuplicateGuess(false);\n                        setKnownCountry(false);\n                    }\n                });\n            }\n        } else {\n            setKnownCountry(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                const lowerCaseBorderingCountryArray = borderingCountries.map(country => country.toLowerCase());\n                if (lowerCaseBorderingCountryArray.includes(guessedName)) {\n                    setCorrectGuesses([...correctGuesses, guessedName]);\n                    setCorrectLastGuess(true);\n                    if (correctGuesses.length + 1 === borderingCountries.length) {\n                        setSucceeded(true);\n                    }\n                } else {\n                    setIncorrectGuesses([...incorrectGuesses, guessedName]);\n                    setIncorrectCount(incorrectCount + 1);\n                    setCorrectLastGuess(false);\n                    if (incorrectCount >= 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    return (\n        <div id='borders'>\n            {!succeeded && !failed && <div>\n                <h2>Bordering Countries</h2>\n                <p>Your country is: {name}</p>\n                <p>{numberOfBorderingCountriesText}</p>\n                <div id='borders-form'>\n                    {<Form onSubmit={handleSubmit}>\n                        <Fragment>\n                            <Form.Group className='mb-3'>\n                                <Typeahead\n                                    id='bordering-countries-guesser'\n                                    onChange={setSelectCountry}\n                                    options={possibleCountries}\n                                    placeholder='Select your country'\n                                    selected={selectCountry}\n                                />\n                            </Form.Group>\n                        </Fragment>\n                        <Button variant='primary' type='submit'>\n                            Guess\n                        </Button>\n                    </Form>}\n                </div>\n            </div>}\n            {guesses.length > 0 && !failed && !succeeded && <BorderingCountriesFeedback\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                incorrectCount={incorrectCount}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {!succeeded && !correctLastGuess && <div id='invalid-border-guess-feedback'>\n                <BasicValidation\n                    duplicateGuess={duplicateGuess}\n                    knownCountry={knownCountry}\n                />\n                {guessedActualCountry && <p style={{ color: 'brown' }}>That's the actual country! Guess the bordering ones instead</p>}\n            </div>}\n            {failed && !succeeded && <FailurePage\n                name={name}\n                map={map}\n                correctGuesses={correctGuesses}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {succeeded && <BorderingCountriesSuccessPage\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                name={name}\n                map={map}\n            />}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import React, { useState } from 'react';\nimport BorderingCountriesGuesser from '../borderingCountriesGuesser';\nimport PlayButton from '../playButton';\nimport Country from '../country';\nimport getAllCountriesRequest from '../../restHelpers/allCountriesRequest';\n\nfunction CountryGuesserSuccessPage(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const flag = props.flag;\n    const map = props.map;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [borderingCountriesGameStarted, setBorderingCountriesGameStarted] = useState(false);\n    const [newCountryFinderGameStarted, setNewCountryFinderGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    function startBorderingCountriesGame() {\n        setBorderingCountriesGameStarted(true);\n        setNewGameStarted(true);\n    }\n\n    async function startNewGame() {\n        setNewCountryFinderGameStarted(true);\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-country-game' >\n                {incorrectCount === 0 && <h5>Amazing! You got <a href={map}>{name}</a> in one!</h5>}\n                {incorrectCount > 0 && <p>Well done! It took you {incorrectCount + 1} attempts to get <a href={map}>{name}</a></p>}\n                {incorrectCount > 0 && <p>Your answer history was: {guesses.toString()}</p>}\n                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n            </div >}\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && borderingCountries.length > 0 && <PlayButton\n                callback={startBorderingCountriesGame}\n                buttonText='Guess the bordering countries'\n            />}\n            {newGameStarted && borderingCountriesGameStarted && <BorderingCountriesGuesser\n                name={name}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n                map={map}\n            />}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Play again'\n            />}\n            {newGameStarted && allCountriesResponse && newCountryFinderGameStarted && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default CountryGuesserSuccessPage;\n","import React from 'react';\n\nfunction duplicateGuess(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const duplicateGuess = props.duplicateGuess;\n\n    return (\n        <div id='country-guess-feedback'>\n            {!duplicateGuess && <p style={{ color: 'red' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n            {<p>Your guesses so far: {guesses.toString()}</p>}\n        </div>\n    )\n}\n\nexport default duplicateGuess;\n","import React, { useState, Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport FailurePage from './resultPages/failurePage';\nimport CountryGuesserSuccessPage from './resultPages/countryGuesserSuccessPage';\nimport BasicValidation from './guessFeedback/basicValidation';\nimport CountryGuessFeedback from './guessFeedback/countryGuessFeedback';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryGuesser(props) {\n    const name = props.name;\n    const population = props.population;\n    const flag = props.flag;\n    const landlocked = props.landlocked;\n    const region = props.region;\n    const subregion = props.subregion;\n    const map = props.map;\n    const capital = props.capital;\n    const possibleCountries = props.possibleCountries;\n    const borderingCountries = props.borderingCountries;\n\n    const [guessAttempted, setGuessAttempted] = useState(false);\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [selectCountry, setSelectCountry] = useState([]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n        if (guessedName.length > 0) {\n            possibleCountries.find(country => {\n                if (country.toLowerCase() === guessedName) {\n                    setKnownCountry(true);\n                    isValidCountry = true;\n                } else {\n                    setDuplicateGuess(false);\n                    setGuessAttempted(false);\n                    setKnownCountry(false);\n                }\n            });\n        } else {\n            setKnownCountry(false);\n            setGuessAttempted(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                setGuessAttempted(true);\n                if (guessedName === name.toLowerCase()) {\n                    setCorrectGuess(true);\n                } else {\n                    setIncorrectCount(incorrectCount + 1)\n                    setCorrectGuess(false);\n                    if (incorrectCount >= 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Mystery Country</h2>\n                {<p>Population = {population}</p>}\n                {incorrectCount >= 1 && <p>Region = {region}</p>}\n                {incorrectCount >= 2 && <p>{landlocked}</p>}\n                {incorrectCount >= 3 && <p>Sub region = {subregion}</p>}\n                {incorrectCount >= 4 && <div>\n                    <p>Flag: </p>\n                    {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n                </div>}\n                {incorrectCount >= 5 && <p>Capital city/cities = {capital}</p>}\n            </div>}\n            {/* TODO look into making the forms more generic and reusable */}\n            <div id='country-form'>\n                {!correctGuess && !failed && <Form onSubmit={handleSubmit}>\n                    <Fragment>\n                        <Form.Group className='mb-3'>\n                            <Typeahead\n                                id='country-search'\n                                onChange={setSelectCountry}\n                                options={possibleCountries}\n                                placeholder=\"Select your country\"\n                                selected={selectCountry}\n                            />\n                        </Form.Group>\n                    </Fragment>\n                    <Button variant='primary' type='submit'>\n                        Guess\n                    </Button>\n                </Form>}\n            </div>\n            <BasicValidation\n                duplicateGuess={duplicateGuess}\n                knownCountry={knownCountry}\n            />\n            {!correctGuess && guessAttempted && !failed && <CountryGuessFeedback\n                guesses={guesses}\n                incorrectCount={incorrectCount}\n                duplicateGuess={duplicateGuess}\n            />}\n            {correctGuess && !failed && <CountryGuesserSuccessPage\n                name={name}\n                map={map}\n                flag={flag}\n                incorrectCount={incorrectCount}\n                guesses={guesses}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n            />}\n            {failed && <FailurePage\n                name={name}\n                map={map}\n                flag={flag}\n            />}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import React from 'react';\nimport CountryGuesser from './countryGuesser';\n\nfunction Country(props) {\n  const countriesInfo = props.countriesInfo;\n\n  const countryCodeMapping = countriesInfo.countryCodeMapping\n  const possibleCountries = countriesInfo.countriesArray;\n  const country = countriesInfo.country;\n\n  function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  function returnBorderingCountries(borderingCountries) {\n    const answerCountries = [];\n    if (borderingCountries) {\n      borderingCountries.forEach(borderingCountry => {\n        countryCodeMapping.find(country => {\n          if (country.code === borderingCountry) {\n            answerCountries.push(country.name);\n          }\n        })\n      });\n    }\n    return answerCountries;\n  }\n\n  return (\n    <div id='country'>\n      {country && <CountryGuesser\n        name={country.name}\n        population={numberWithCommas(country.population)}\n        flag={country.flags}\n        landlocked={country.landlocked ? 'Country is landlocked' : 'Country is not landlocked'}\n        region={country.region}\n        subregion={country.subregion}\n        map={country.map}\n        capital={country.capital.toString()}\n        borderingCountries={returnBorderingCountries(country.borders)}\n        possibleCountries={possibleCountries}\n      />}\n    </div >\n  );\n}\n\nexport default Country;\n","import React, { useState, useEffect } from 'react';\nimport Country from './components/country';\nimport getAllCountriesRequest from './restHelpers/allCountriesRequest';\n\n// TODO tidy up CSS for whole app\n// TODO change favicon\nfunction App() {\n  const [allCountriesResponse, setAllCountriesResponse] = useState();\n  const [foundCountry, setFindCountry] = useState(false);\n\n  useEffect(() => {\n    if (!foundCountry) {\n      getAllCountriesRequest().then(allCountriesResponse => {\n        setFindCountry(true);\n        setAllCountriesResponse(allCountriesResponse);\n      });\n    }\n  });\n\n  return (\n    <div id='app'>\n      <h1>FUN WITH COUNTRIES</h1>\n      {allCountriesResponse && <Country\n        countriesInfo={allCountriesResponse}\n      />}\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}