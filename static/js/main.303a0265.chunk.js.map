{"version":3,"sources":["components/button.js","components/startNewGame.js","helpers/allCountryDefaultStats.js","components/countryGuesser/countryGuesserStats.js","helpers/utils.js","components/countryGuesser/countryGuesserFailurePage.js","components/basicValidation.js","components/borderingCountries/borderingCountriesFeedback.js","components/borderingCountries/borderingCountriesStats.js","components/borderingCountries/borderingCountriesFailurePage.js","components/borderingCountries/borderingCountriesSuccessPage.js","components/countryForm.js","components/borderingCountries/borderingCountriesClue.js","helpers/countryValidation.js","components/borderingCountries/borderingCountriesGuesser.js","components/countryGuesser/countryGuesserSuccessPage.js","components/countryGuesser/countryGuesserFeedback.js","components/countryGuesser/countryGuesser.js","helpers/countryHelper.js","components/country.js","components/stats.js","App.js","index.js"],"names":["CustomButton","props","callback","buttonText","Button","variant","size","onClick","StartNewGame","countriesInfo","newGameStartedCallback","useState","newGameStarted","setNewGameStarted","a","id","allCountryStats","best","bestBorders","CountryGuesserStats","updateStats","updateStatsCallback","country","numberOfGuesses","succeeded","numberOfWins","setNumberOfWins","numberOfAttempts","setNumberOfAttempts","numberOfGames","setNumberOfGames","streak","setStreak","highScore","setHighScore","useEffect","localStorage","setItem","JSON","stringify","countryHighScores","parse","getItem","previousBestScore","error","console","log","capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","CountryGuesserFailurePage","name","flag","map","guesses","style","color","href","border","src","alt","length","basicValidation","duplicateGuess","knownCountry","borderingCountriesFeedback","correctGuesses","incorrectGuesses","borderingCountriesCount","incorrectCount","guessesRemainingCount","guessesRemainingText","countriesRemainingCount","countriesRemainingText","BorderingCountriesStats","numberOfCorrectAnswers","numberOfIncorrectAnswers","countryBordersHighScores","BorderingCountriesFailurePage","borderingCountries","missingAnswersArray","filter","countryGuess","includes","toLowerCase","BorderingCountriesSuccessPage","answerOrAnswers","messageText","CountryForm","possibleCountries","value","setValue","handleSubmit","Form","onSubmit","Group","className","onChange","options","placeholder","selected","type","BorderingCountriesClue","clues","checkValidGuess","guessedName","isValidCountry","find","borderingCountriesGuesser","numberOfBorderingCountriesText","setCorrectGuesses","correctLastGuess","setCorrectLastGuess","setIncorrectGuesses","setIncorrectCount","setGuesses","setDuplicateGuess","failed","setFailed","setSucceeded","setKnownCountry","guessedActualCountry","setGuessedActualCountry","setClues","startingLetters","letter","push","findStartingLetterOfBorders","event","preventDefault","target","trim","checkGuessIsCorrect","CountryGuesserSuccessPage","borderingCountriesGameStarted","setBorderingCountriesGameStarted","Container","Row","Col","xs","lg","CountryGuessFeedback","guessedBorderingCountry","CountryGuesser","population","landlocked","region","subregion","capital","correctGuess","setCorrectGuess","setGuessedBorderingCountry","isGuessBorderingCountry","axios","get","response","body","data","countriesArray","countryCodeMapping","extraCountries","common","unMember","independent","countryMappingObj","code","cca3","returnObject","sort","responseBody","returnBorderingCountries","answerCountries","borderingCountry","allCountriesRequest","Country","countriesResponse","number","selectedCountry","Math","floor","random","borders","maps","googleMaps","toString","flags","png","selectCountry","Stats","showStats","setShowStats","setButtonText","countryMap","Object","entries","countryObj","stats","numberOfCountryGuesserGames","numberOfCountryGuesserWins","numberOfCountryGuesserAttempts","countryGuesserStreak","numberOfBorderGames","numberOfBorderWins","numberOfCorrectBorderAnswers","numberOfIncorrectBorderAnswers","borderStreak","toFixed","ListGroup","c","countryGuesserHighScore","borderingCountryHighScore","Item","App","allCountriesResponse","setAllCountriesResponse","foundCountry","setFindCountry","getAllCountriesRequest","then","fontSize","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.303a0265.chunk.js","sourcesContent":["import React from 'react';\nimport { Button  } from 'react-bootstrap';\n\nfunction CustomButton(props) {\n    const callback = props.callback;\n    const buttonText = props.buttonText;\n\n    return (\n        <div>\n            <Button variant='light' size='lg' onClick={callback}>{buttonText}</Button>\n        </div>\n    );\n}\n\nexport default CustomButton;\n","import React, { useState } from 'react';\nimport Country from './country';\nimport Button from './button';\n\nfunction StartNewGame(props) {\n    const countriesInfo = props.countriesInfo;\n    const buttonText = props.buttonText;\n    const newGameStartedCallback = props.callback;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        newGameStartedCallback(true);\n    }\n\n    return (\n        <div id='start-new-game'>\n            {!newGameStarted && <Button\n                callback={startNewGame}\n                buttonText={buttonText}\n            />}\n            {newGameStarted && <Country\n                countriesInfo={countriesInfo}\n            />}\n        </div>\n    )\n}\n\nexport default StartNewGame;\n","const allCountryStats = {\n    'Afghanistan': { best: null, bestBorders: null },\n    'Albania': { best: null, bestBorders: null },\n    'Algeria': { best: null, bestBorders: null },\n    'Andorra': { best: null, bestBorders: null },\n    'Angola': { best: null, bestBorders: null },\n    'Antigua and Barbuda': { best: null, bestBorders: null },\n    'Argentina': { best: null, bestBorders: null },\n    'Armenia': { best: null, bestBorders: null },\n    'Australia': { best: null, bestBorders: null },\n    'Austria': { best: null, bestBorders: null },\n    'Azerbaijan': { best: null, bestBorders: null },\n    'Bahamas': { best: null, bestBorders: null },\n    'Bahrain': { best: null, bestBorders: null },\n    'Bangladesh': { best: null, bestBorders: null },\n    'Barbados': { best: null, bestBorders: null },\n    'Belarus': { best: null, bestBorders: null },\n    'Belgium': { best: null, bestBorders: null },\n    'Belize': { best: null, bestBorders: null },\n    'Benin': { best: null, bestBorders: null },\n    'Bhutan': { best: null, bestBorders: null },\n    'Bolivia': { best: null, bestBorders: null },\n    'Bosnia and Herzegovina': { best: null, bestBorders: null },\n    'Botswana': { best: null, bestBorders: null },\n    'Brazil': { best: null, bestBorders: null },\n    'Brunei': { best: null, bestBorders: null },\n    'Bulgaria': { best: null, bestBorders: null },\n    'Burkina Faso': { best: null, bestBorders: null },\n    'Burundi': { best: null, bestBorders: null },\n    'Cambodia': { best: null, bestBorders: null },\n    'Cameroon': { best: null, bestBorders: null },\n    'Canada': { best: null, bestBorders: null },\n    'Cape Verde': { best: null, bestBorders: null },\n    'Central African Republic': { best: null, bestBorders: null },\n    'Chad': { best: null, bestBorders: null },\n    'Chile': { best: null, bestBorders: null },\n    'China': { best: null, bestBorders: null },\n    'Colombia': { best: null, bestBorders: null },\n    'Comoros': { best: null, bestBorders: null },\n    'Costa Rica': { best: null, bestBorders: null },\n    'Croatia': { best: null, bestBorders: null },\n    'Cuba': { best: null, bestBorders: null },\n    'Cyprus': { best: null, bestBorders: null },\n    'Czechia': { best: null, bestBorders: null },\n    'DR Congo': { best: null, bestBorders: null },\n    'Denmark': { best: null, bestBorders: null },\n    'Djibouti': { best: null, bestBorders: null },\n    'Dominica': { best: null, bestBorders: null },\n    'Dominican Republic': { best: null, bestBorders: null },\n    'Ecuador': { best: null, bestBorders: null },\n    'Egypt': { best: null, bestBorders: null },\n    'El Salvador': { best: null, bestBorders: null },\n    'Equatorial Guinea': { best: null, bestBorders: null },\n    'Eritrea': { best: null, bestBorders: null },\n    'Estonia': { best: null, bestBorders: null },\n    'Eswatini': { best: null, bestBorders: null },\n    'Ethiopia': { best: null, bestBorders: null },\n    'Fiji': { best: null, bestBorders: null },\n    'Finland': { best: null, bestBorders: null },\n    'France': { best: null, bestBorders: null },\n    'Gabon': { best: null, bestBorders: null },\n    'Gambia': { best: null, bestBorders: null },\n    'Georgia': { best: null, bestBorders: null },\n    'Germany': { best: null, bestBorders: null },\n    'Ghana': { best: null, bestBorders: null },\n    'Greece': { best: null, bestBorders: null },\n    'Greenland': { best: null, bestBorders: null },\n    'Grenada': { best: null, bestBorders: null },\n    'Guatemala': { best: null, bestBorders: null },\n    'Guinea': { best: null, bestBorders: null },\n    'Guyana': { best: null, bestBorders: null },\n    'Haiti': { best: null, bestBorders: null },\n    'Honduras': { best: null, bestBorders: null },\n    'Hungary': { best: null, bestBorders: null },\n    'Iceland': { best: null, bestBorders: null },\n    'India': { best: null, bestBorders: null },\n    'Indonesia': { best: null, bestBorders: null },\n    'Iran': { best: null, bestBorders: null },\n    'Iraq': { best: null, bestBorders: null },\n    'Ireland': { best: null, bestBorders: null },\n    'Israel': { best: null, bestBorders: null },\n    'Italy': { best: null, bestBorders: null },\n    'Ivory Coast': { best: null, bestBorders: null },\n    'Jamaica': { best: null, bestBorders: null },\n    'Japan': { best: null, bestBorders: null },\n    'Jordan': { best: null, bestBorders: null },\n    'Kazakhstan': { best: null, bestBorders: null },\n    'Kenya': { best: null, bestBorders: null },\n    'Kiribati': { best: null, bestBorders: null },\n    'Kosovo': { best: null, bestBorders: null },\n    'Kuwait': { best: null, bestBorders: null },\n    'Kyrgyzstan': { best: null, bestBorders: null },\n    'Laos': { best: null, bestBorders: null },\n    'Latvia': { best: null, bestBorders: null },\n    'Lebanon': { best: null, bestBorders: null },\n    'Lesotho': { best: null, bestBorders: null },\n    'Liberia': { best: null, bestBorders: null },\n    'Libya': { best: null, bestBorders: null },\n    'Liechtenstein': { best: null, bestBorders: null },\n    'Lithuania': { best: null, bestBorders: null },\n    'Luxembourg': { best: null, bestBorders: null },\n    'Madagascar': { best: null, bestBorders: null },\n    'Malawi': { best: null, bestBorders: null },\n    'Malaysia': { best: null, bestBorders: null },\n    'Maldives': { best: null, bestBorders: null },\n    'Mali': { best: null, bestBorders: null },\n    'Malta': { best: null, bestBorders: null },\n    'Marshall Islands': { best: null, bestBorders: null },\n    'Mauritania': { best: null, bestBorders: null },\n    'Mauritius': { best: null, bestBorders: null },\n    'Mexico': { best: null, bestBorders: null },\n    'Micronesia': { best: null, bestBorders: null },\n    'Moldova': { best: null, bestBorders: null },\n    'Monaco': { best: null, bestBorders: null },\n    'Mongolia': { best: null, bestBorders: null },\n    'Montenegro': { best: null, bestBorders: null },\n    'Morocco': { best: null, bestBorders: null },\n    'Mozambique': { best: null, bestBorders: null },\n    'Myanmar': { best: null, bestBorders: null },\n    'Namibia': { best: null, bestBorders: null },\n    'Nauru': { best: null, bestBorders: null },\n    'Nepal': { best: null, bestBorders: null },\n    'Netherlands': { best: null, bestBorders: null },\n    'New Zealand': { best: null, bestBorders: null },\n    'Nicaragua': { best: null, bestBorders: null },\n    'Niger': { best: null, bestBorders: null },\n    'Nigeria': { best: null, bestBorders: null },\n    'North Korea': { best: null, bestBorders: null },\n    'North Macedonia': { best: null, bestBorders: null },\n    'Norway': { best: null, bestBorders: null },\n    'Oman': { best: null, bestBorders: null },\n    'Pakistan': { best: null, bestBorders: null },\n    'Palau': { best: null, bestBorders: null },\n    'Palestine': { best: null, bestBorders: null },\n    'Panama': { best: null, bestBorders: null },\n    'Papua New Guinea': { best: null, bestBorders: null },\n    'Paraguay': { best: null, bestBorders: null },\n    'Peru': { best: null, bestBorders: null },\n    'Philippines': { best: null, bestBorders: null },\n    'Poland': { best: null, bestBorders: null },\n    'Portugal': { best: null, bestBorders: null },\n    'Qatar': { best: null, bestBorders: null },\n    'Republic of the Congo': { best: null, bestBorders: null },\n    'Romania': { best: null, bestBorders: null },\n    'Russia': { best: null, bestBorders: null },\n    'Rwanda': { best: null, bestBorders: null },\n    'Saint Kitts and Nevis': { best: null, bestBorders: null },\n    'Saint Lucia': { best: null, bestBorders: null },\n    'Saint Vincent and the Grenadines': { best: null, bestBorders: null },\n    'Samoa': { best: null, bestBorders: null },\n    'San Marino': { best: null, bestBorders: null },\n    'Saudi Arabia': { best: null, bestBorders: null },\n    'Senegal': { best: null, bestBorders: null },\n    'Serbia': { best: null, bestBorders: null },\n    'Seychelles': { best: null, bestBorders: null },\n    'Sierra Leone': { best: null, bestBorders: null },\n    'Singapore': { best: null, bestBorders: null },\n    'Slovakia': { best: null, bestBorders: null },\n    'Slovenia': { best: null, bestBorders: null },\n    'Solomon Islands': { best: null, bestBorders: null },\n    'Somalia': { best: null, bestBorders: null },\n    'South Africa': { best: null, bestBorders: null },\n    'South Korea': { best: null, bestBorders: null },\n    'South Sudan': { best: null, bestBorders: null },\n    'Spain': { best: null, bestBorders: null },\n    'Sri Lanka': { best: null, bestBorders: null },\n    'Sudan': { best: null, bestBorders: null },\n    'Suriname': { best: null, bestBorders: null },\n    'Sweden': { best: null, bestBorders: null },\n    'Switzerland': { best: null, bestBorders: null },\n    'Syria': { best: null, bestBorders: null },\n    'São Tomé and Príncipe': { best: null, bestBorders: null },\n    'Taiwan': { best: null, bestBorders: null },\n    'Tajikistan': { best: null, bestBorders: null },\n    'Tanzania': { best: null, bestBorders: null },\n    'Thailand': { best: null, bestBorders: null },\n    'Timor-Leste': { best: null, bestBorders: null },\n    'Togo': { best: null, bestBorders: null },\n    'Tonga': { best: null, bestBorders: null },\n    'Trinidad and Tobago': { best: null, bestBorders: null },\n    'Tunisia': { best: null, bestBorders: null },\n    'Turkey': { best: null, bestBorders: null },\n    'Turkmenistan': { best: null, bestBorders: null },\n    'Tuvalu': { best: null, bestBorders: null },\n    'Uganda': { best: null, bestBorders: null },\n    'Ukraine': { best: null, bestBorders: null },\n    'United Arab Emirates': { best: null, bestBorders: null },\n    'United Kingdom': { best: null, bestBorders: null },\n    'United States': { best: null, bestBorders: null },\n    'Uruguay': { best: null, bestBorders: null },\n    'Uzbekistan': { best: null, bestBorders: null },\n    'Vanuatu': { best: null, bestBorders: null },\n    'Vatican City': { best: null, bestBorders: null },\n    'Venezuela': { best: null, bestBorders: null },\n    'Vietnam': { best: null, bestBorders: null },\n    'Western Sahara': { best: null, bestBorders: null },\n    'Yemen': { best: null, bestBorders: null },\n    'Zambia': { best: null, bestBorders: null },\n    'Zimbabwe': { best: null, bestBorders: null },\n}\n\nexport default allCountryStats;","import React, { useState, useEffect } from 'react';\nimport allCountryStats from '../../helpers/allCountryDefaultStats';\n\nfunction CountryGuesserStats(props) {\n    const updateStats = props.updateStatsCallback;\n    const country = props.country;\n    const numberOfGuesses = props.numberOfGuesses;\n    const succeeded = props.succeeded;\n\n    const [numberOfWins, setNumberOfWins] = useState(0);\n    const [numberOfAttempts, setNumberOfAttempts] = useState(0);\n    const [numberOfGames, setNumberOfGames] = useState(0);\n    const [streak, setStreak] = useState(0);\n    const [highScore, setHighScore] = useState(false);\n\n    const called = true;\n\n    useEffect(() => {\n        const { numberOfWins, numberOfGames, numberOfAttempts, streak } = updateStats();\n        setNumberOfWins(numberOfWins);\n        setNumberOfGames(numberOfGames);\n        setNumberOfAttempts(numberOfAttempts);\n        setStreak(streak);\n\n        try {\n            localStorage.setItem('numberOfWins', JSON.stringify(numberOfWins));\n            localStorage.setItem('numberOfGames', JSON.stringify(numberOfGames));\n            localStorage.setItem('numberOfAttempts', JSON.stringify(numberOfAttempts));\n            localStorage.setItem('streak', JSON.stringify(streak));\n\n            const countryHighScores = JSON.parse(localStorage.getItem('countryHighScores')) || allCountryStats;\n            if (succeeded) {\n                const previousBestScore = countryHighScores[country].best;\n                if (!previousBestScore || numberOfGuesses < previousBestScore) {\n                    countryHighScores[country].best = numberOfGuesses;\n                    setHighScore(true);\n                }\n            } else {\n                countryHighScores[country].best = 99;\n            }\n            localStorage.setItem('countryHighScores', JSON.stringify(countryHighScores));\n        } catch (error) {\n            console.log('Unable to update stats');\n        }\n    }, [called]);\n\n    return (\n        <div id='country-guesser-stats'>\n            {numberOfAttempts > 0 && numberOfGames > 0 && <div>\n                <h2>Stats</h2>\n                {succeeded > 0 && highScore && <p>That was your best score for {country}!</p>}\n                <p>Total games: {numberOfGames}</p>\n                <p>Number of wins: {numberOfWins}</p>\n                {numberOfWins > 0 && streak > 0 && <p>You are on a {streak} game winning streak playing Country Guesser</p>}\n            </div>}\n        </div>\n    );\n}\n\nexport default CountryGuesserStats;\n","export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] = array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        })\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString = index === 0 ? capitalizedString : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n\nexport function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport CountryGuesserStats from './countryGuesserStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserFailurePage(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const flag = props.flag;\n    const map = props.map;\n    const guesses = props.guesses;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfAttempts')) || 0;\n        const stats = {\n            numberOfWins,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            streak: 0,\n        };\n        return stats;\n    }\n\n    return (\n        <div id='country-guesser-failure-page'>\n            {!newGameStarted && < div id='country-failure' >\n                <p style={{ color: '#F66B0E' }}>You failed. Better luck next time</p>\n                {<p>The answer was <a href={map}>{name}</a></p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                <img style={{ border: 'solid' }} src={flag} alt='Country Flag' />\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <CountryGuesserStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={false}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Try again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default CountryGuesserFailurePage;\n","import React from 'react';\n\nfunction basicValidation(props) {\n    const duplicateGuess = props.duplicateGuess;\n    const knownCountry = props.knownCountry;\n\n    return (\n        <div style={{ color: '#F66B0E' }} id='invalid-guess-feedback'>\n            {duplicateGuess && <p>You've already tried that country!</p>}\n            {!knownCountry && <p>Enter a valid country name</p>}\n        </div>\n    )\n}\n\nexport default basicValidation;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesFeedback(props) {\n    const correctGuesses = props.correctGuesses;\n    const incorrectGuesses = props.incorrectGuesses;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const incorrectCount = props.incorrectCount;\n\n    const guessesRemainingCount = 6 - incorrectCount;\n    const guessesRemainingText = incorrectCount >= 5\n        ? `You have ${guessesRemainingCount} life remaining`\n        : `You have ${guessesRemainingCount} lives remaining`;\n\n    const countriesRemainingCount = borderingCountriesCount - correctGuesses.length;\n    const countriesRemainingText = correctGuesses.length === borderingCountriesCount - 1\n        ? `There is ${countriesRemainingCount} bordering country remaining`\n        : `There are ${countriesRemainingCount} bordering countries remaining`;\n\n    return (\n        <div id='bordering-countries-guess-feedback'>\n            {correctGuesses.length > 0 && <p style={{ color: '#F66B0E' }}>Correct answers so far: {capitalizeText(correctGuesses)}</p>}\n            {incorrectGuesses.length > 0 && <p style={{ color: '#F66B0E' }}>Incorrect answers so far: {capitalizeText(incorrectGuesses)}</p>}\n            <br />\n            <p>{guessesRemainingText}</p>\n            <p>{countriesRemainingText}</p>\n            <br />\n        </div>\n    )\n}\n\nexport default borderingCountriesFeedback;\n","import React, { useState, useEffect } from 'react';\nimport allCountryStats from '../../helpers/allCountryDefaultStats';\n\nfunction BorderingCountriesStats(props) {\n    const updateStats = props.updateStatsCallback;\n    const country = props.country;\n    const numberOfGuesses = props.numberOfGuesses;\n    const succeeded = props.succeeded;\n\n    const [numberOfWins, setNumberOfWins] = useState(0);\n    const [numberOfAttempts, setNumberOfAttempts] = useState(0);\n    const [numberOfGames, setNumberOfGames] = useState(0);\n    const [streak, setStreak] = useState(0);\n    const [highScore, setHighScore] = useState(false);\n\n    const called = true;\n\n    useEffect(() => {\n        const {\n            numberOfWins, numberOfGames, numberOfAttempts, numberOfCorrectAnswers, numberOfIncorrectAnswers, streak,\n        } = updateStats();\n        setNumberOfWins(numberOfWins);\n        setNumberOfGames(numberOfGames);\n        setNumberOfAttempts(numberOfAttempts);\n        setStreak(streak);\n\n        try {\n            localStorage.setItem('numberOfBorderWins', JSON.stringify(numberOfWins));\n            localStorage.setItem('numberOfBorderGames', JSON.stringify(numberOfGames));\n            localStorage.setItem('numberOfBorderAttempts', JSON.stringify(numberOfAttempts));\n            localStorage.setItem('numberOfCorrectBorderAnswers', JSON.stringify(numberOfCorrectAnswers));\n            localStorage.setItem('numberOfIncorrectBorderAnswers', JSON.stringify(numberOfIncorrectAnswers));\n            localStorage.setItem('borderStreak', JSON.stringify(streak));\n\n            const countryBordersHighScores = JSON.parse(localStorage.getItem('countryHighScores')) || allCountryStats;\n            if (succeeded) {\n                const previousBestScore = countryBordersHighScores[country].bestBorders;\n                if (!previousBestScore || numberOfGuesses < previousBestScore) {\n                    countryBordersHighScores[country].bestBorders = numberOfGuesses;\n                    setHighScore(true);\n                }\n            } else {\n                countryBordersHighScores[country].bestBorders = 99;\n            }\n            localStorage.setItem('countryHighScores', JSON.stringify(countryBordersHighScores));\n        } catch (error) {\n            console.log('Unable to update stats');\n        }\n    }, [called]);\n\n    return (\n        <div id='country-guesser-stats'>\n            {numberOfGames > 0 && numberOfAttempts > 0 && <div>\n                <h2>Stats</h2>\n                {succeeded && highScore && <p style={{ color: '#F66B0E' }}>That was your best score for {country}!</p>}\n                <p>Total games: {numberOfGames}</p>\n                <p>Number of wins: {numberOfWins}</p>\n                {numberOfWins > 0 && streak > 0 && <p>You are on a {streak} game winning streak playing Bordering Countries</p>}\n            </div>}\n        </div>\n    );\n}\n\nexport default BorderingCountriesStats;\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport BorderingCountriesStats from '../borderingCountries/borderingCountriesStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesFailurePage(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const map = props.map;\n    const borderingCountries = props.borderingCountries;\n    const correctGuesses = props.correctGuesses;\n    const guesses = props.guesses;\n\n    const incorrectCount = guesses.length - correctGuesses.length;\n    const borderingCountriesCount = borderingCountries.length;\n    const missingAnswersArray = borderingCountries.filter(countryGuess => !correctGuesses.includes(countryGuess.toLowerCase()));\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfBorderWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfBorderGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfBorderAttempts')) || 0;\n        const numberOfCorrectAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers')) || 0;\n        const numberOfIncorrectAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            numberOfCorrectAnswers: numberOfCorrectAnswers + correctGuesses.length,\n            numberOfIncorrectAnswers: numberOfIncorrectAnswers + incorrectCount,\n            streak: 0,\n        };\n        return stats;\n    }\n\n    return (\n        <div id='bordering-countries-failure-page'>\n            {borderingCountries && !newGameStarted && < div id='bordering-countries-failure' >\n                <p style={{ color: '#F66B0E' }}>You failed. Better luck next time</p>\n                <p>See {name} on the <a href={map}>map</a></p>\n                {correctGuesses.length === 0 && <p>You found none of the bordering countries and missed {borderingCountriesCount}</p>}\n                {correctGuesses.length > 0 && <p>You found {correctGuesses.length} of {borderingCountriesCount}</p>}\n                {correctGuesses.length > 0 && <p>You found: {capitalizeText(correctGuesses)}</p>}\n                {missingAnswersArray && <p>You missed: {capitalizeText(missingAnswersArray)}</p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <BorderingCountriesStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={false}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Try again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default BorderingCountriesFailurePage;\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport BorderingCountriesStats from './borderingCountriesStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesSuccessPage(props) {\n    const countriesInfo = props.countriesInfo;\n    const incorrectGuesses = props.incorrectGuesses;\n    const correctGuesses = props.correctGuesses;\n    const name = props.name;\n    const map = props.map;\n    const guesses = props.guesses;\n    const incorrectCount = incorrectGuesses.length;\n    const answerOrAnswers = incorrectCount === 1 ? 'answer' : 'answers';\n\n    const messageText = correctGuesses.length === 1\n        ? `Well done! You found the only bordering country of ${name} with ${incorrectCount} incorrect ${answerOrAnswers}`\n        : `Well done! You found the ${correctGuesses.length} bordering countries of ${name} with ${incorrectCount} incorrect answers`;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfBorderWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfBorderGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfBorderAttempts')) || 0;\n        const numberOfCorrectAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers')) || 0;\n        const numberOfIncorrectAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers')) || 0;\n        const streak = JSON.parse(localStorage.getItem('borderStreak')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins + 1,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            numberOfCorrectAnswers: numberOfCorrectAnswers + correctGuesses.length,\n            numberOfIncorrectAnswers: numberOfIncorrectAnswers + incorrectCount,\n            streak: streak + 1,\n        };\n        return stats;\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-bordering-countries-game' >\n                <h5 style={{ color: '#F66B0E' }}>{messageText}</h5>\n                <p>See <a href={map}>{name}</a> on the map</p>\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <BorderingCountriesStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={true}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Play again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default BorderingCountriesSuccessPage;\n","import React, { Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryForm(props) {\n    const possibleCountries = props.possibleCountries;\n    const value = props.value;\n    const setValue = props.setValue;\n    const handleSubmit = props.handleSubmit;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Fragment>\n                <Form.Group className='mb-3'>\n                    <Typeahead\n                        id='country-search'\n                        onChange={setValue}\n                        options={possibleCountries}\n                        placeholder='Countries'\n                        selected={value}\n                        size='lg'\n                    />\n                </Form.Group>\n            </Fragment>\n            <Button variant='light' type='submit'>\n                Guess\n            </Button>\n        </Form>\n    )\n}\n\nexport default CountryForm;\n","import React from 'react';\n\nfunction BorderingCountriesClue(props) {\n    const clues = props.clues;\n\n    return (\n        <div id='country-initial-clue'>\n            {clues && <p>The remaining bordering countries begin with the following letters: {clues}</p>}\n        </div>\n    );\n}\n\nexport default BorderingCountriesClue;\n","function checkValidGuess(guessedName, possibleCountries, guesses) {\n    let isValidCountry = false;\n    let knownCountry = false;\n    let duplicateGuess = false;\n    if (guessedName.length > 0) {\n        possibleCountries.find(country => {\n            if (country.toLowerCase() === guessedName) {\n                knownCountry = true;\n                isValidCountry = true;\n            }\n            if (guesses.includes(guessedName)) {\n                duplicateGuess = true;\n            }\n        });\n    }\n    const returnObj = {\n        isValidCountry,\n        knownCountry,\n        duplicateGuess,\n    }\n    return returnObj;\n}\n\nexport default checkValidGuess;\n","import React, { useState, useEffect } from 'react';\nimport BasicValidation from '../basicValidation';\nimport BorderingCountriesFeedback from './borderingCountriesFeedback';\nimport BorderingCountriesFailurePage from './borderingCountriesFailurePage';\nimport BorderingCountriesSuccessPage from '../borderingCountries/borderingCountriesSuccessPage';\nimport CountryForm from '../countryForm';\nimport BorderingCountriesClue from './borderingCountriesClue';\nimport checkValidGuess from '../../helpers/countryValidation';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesGuesser(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const map = props.map;\n\n    const numberOfBorderingCountriesText = borderingCountries.length > 1\n        ? `There are ${borderingCountries.length} bordering countries to find in total`\n        : 'There is 1 bordering country to find';\n\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [correctLastGuess, setCorrectLastGuess] = useState(false);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState([]);\n    const [guessedActualCountry, setGuessedActualCountry] = useState(false);\n    const [clues, setClues] = useState();\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue([''])\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let { isValidCountry, knownCountry, duplicateGuess } = checkValidGuess(guessedName, possibleCountries, guesses);\n        setCorrectLastGuess(false);\n        if (guessedName === name.toLowerCase()) {\n            setGuessedActualCountry(true);\n            isValidCountry = false;\n        } else {\n            setGuessedActualCountry(false);\n        }\n        setKnownCountry(knownCountry);\n        setDuplicateGuess(duplicateGuess);\n        if (isValidCountry && knownCountry && !duplicateGuess) {\n            checkGuessIsCorrect(guessedName);\n        }\n    };\n\n    function checkGuessIsCorrect(guessedName) {\n        const lowerCaseBorderingCountryArray = borderingCountries.map(country => country.toLowerCase());\n        if (lowerCaseBorderingCountryArray.includes(guessedName)) {\n            setCorrectGuesses([...correctGuesses, guessedName]);\n            setCorrectLastGuess(true);\n            if (correctGuesses.length + 1 === borderingCountries.length) {\n                setSucceeded(true);\n            }\n        } else {\n            setIncorrectGuesses([...incorrectGuesses, guessedName]);\n            setIncorrectCount(incorrectCount + 1);\n            setCorrectLastGuess(false);\n        }\n        setGuesses([...guesses, guessedName]);\n    }\n\n    function findStartingLetterOfBorders() {\n        if (incorrectGuesses.length >= 4) {\n            const startingLetters = [];\n            borderingCountries.forEach((country) => {\n                if (!correctGuesses.includes(country.toLowerCase())) {\n                    const letter = country.charAt(0).toUpperCase();\n                    startingLetters.push(letter);\n                }\n            });\n            return capitalizeText(startingLetters);\n        }\n    }\n\n    useEffect(() => {\n        if (incorrectCount >= 6) {\n            setFailed(true);\n        }\n\n        const clues = findStartingLetterOfBorders();\n        setClues(clues);\n    })\n\n    return (\n        <div id='borders'>\n            {!succeeded && !failed && <div>\n                <h2>Bordering Countries</h2>\n                <p>Your country is: {name}</p>\n                <p>{numberOfBorderingCountriesText}</p>\n                <div id='borders-form'>\n                    <CountryForm\n                        possibleCountries={possibleCountries}\n                        value={value}\n                        setValue={setValue}\n                        handleSubmit={handleSubmit}\n                    />\n                </div>\n            </div>}\n            {guesses.length > 0 && !failed && !succeeded && <BorderingCountriesFeedback\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                incorrectCount={incorrectCount}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {!succeeded && !correctLastGuess && <div id='invalid-border-guess-feedback'>\n                <BasicValidation\n                    duplicateGuess={duplicateGuess}\n                    knownCountry={knownCountry}\n                />\n                {guessedActualCountry && <p style={{ color: '#F66B0E' }}>That's the actual country! Guess the bordering ones instead</p>}\n            </div>}\n            {!succeeded && !failed && clues && <BorderingCountriesClue\n                clues={clues}\n            />}\n            {failed && !succeeded && <BorderingCountriesFailurePage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                correctGuesses={correctGuesses}\n                borderingCountries={borderingCountries}\n                guesses={guesses}\n            />}\n            {succeeded && <BorderingCountriesSuccessPage\n                countriesInfo={countriesInfo}\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                name={name}\n                map={map}\n                guesses={guesses}\n            />}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import React, { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport BorderingCountriesGuesser from '../borderingCountries/borderingCountriesGuesser';\nimport Button from '../button';\nimport StartNewGame from '../startNewGame';\nimport CountryGuesserStats from '../countryGuesser/countryGuesserStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserSuccessPage(props) {\n    const countriesInfo = props.countriesInfo;\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const flag = props.flag;\n    const map = props.map;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [borderingCountriesGameStarted, setBorderingCountriesGameStarted] = useState(false);\n\n    function startBorderingCountriesGame() {\n        setBorderingCountriesGameStarted(true);\n        setNewGameStarted(true);\n    }\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n    }\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfAttempts')) || 0;\n        const streak = JSON.parse(localStorage.getItem('streak')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins + 1,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            streak: streak + 1,\n        };\n        return stats;\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-country-game' >\n                {incorrectCount === 0 && <h5 style={{ color: '#F66B0E' }}>Amazing! You got <a href={map}>{name}</a> in one!</h5>}\n                {incorrectCount > 0 && <h5 style={{ color: '#F66B0E' }}>Well done! It took you {incorrectCount + 1} attempts to get <a href={map}>{name}</a></h5>}\n                {incorrectCount > 0 && <p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <CountryGuesserStats\n                updateStatsCallback={updateStats}\n                country={name}\n                numberOfGuesses={guesses.length}\n                succeeded={true}\n            />}\n\n            <Container>\n                <Row>\n                    <Col xs lg='2'></Col>\n                    <Col>\n                        {!borderingCountriesGameStarted && <StartNewGame\n                            countriesInfo={countriesInfo}\n                            buttonText='Play again'\n                            callback={startNewGame}\n                        />}\n                    </Col>\n                    {borderingCountries.length > 0 &&\n                        <Col>\n                            {!newGameStarted && <Button\n                                callback={startBorderingCountriesGame}\n                                buttonText='Guess the bordering countries'\n                            />}\n                        </Col>\n                    }\n                    <Col xs lg='2'></Col>\n                </Row>\n            </Container>\n            {newGameStarted && borderingCountriesGameStarted && <BorderingCountriesGuesser\n                countriesInfo={countriesInfo}\n                name={name}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n                map={map}\n            />}\n        </div>\n    )\n}\n\nexport default CountryGuesserSuccessPage;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuessFeedback(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const duplicateGuess = props.duplicateGuess;\n    const guessedBorderingCountry = props.guessedBorderingCountry;\n\n    return (\n        <div id='country-guess-feedback'>\n            {!duplicateGuess && <p style={{ color: '#F66B0E' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n            {guessedBorderingCountry && <p>You're getting close!</p>}\n            {<p>Your answers so far: {capitalizeText(guesses)}</p>}\n        </div>\n    )\n}\n\nexport default CountryGuessFeedback;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport CountryGuesserFailurePage from './countryGuesserFailurePage';\nimport CountryGuesserSuccessPage from './countryGuesserSuccessPage';\nimport BasicValidation from '../basicValidation';\nimport CountryGuessFeedback from './countryGuesserFeedback';\nimport CountryForm from '../countryForm';\nimport checkValidGuess from '../../helpers/countryValidation';\n\nfunction CountryGuesser(props) {\n    const countriesInfo = props.countriesInfo;\n    const country = props.country;\n    const possibleCountries = props.possibleCountries;\n\n    const name = country.name;\n    const population = country.population;\n    const flag = country.flag;\n    const landlocked = country.landlocked;\n    const region = country.region;\n    const subregion = country.subregion;\n    const map = country.map;\n    const capital = country.capital;\n    const borderingCountries = country.borderingCountries;\n\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState(['']);\n    const [guessedBorderingCountry, setGuessedBorderingCountry] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue(['']);\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        const { isValidCountry, knownCountry, duplicateGuess } = checkValidGuess(guessedName, possibleCountries, guesses);\n        setKnownCountry(knownCountry);\n        setDuplicateGuess(duplicateGuess);\n        if (isValidCountry && knownCountry && !duplicateGuess) {\n            checkGuessIsCorrect(guessedName);\n        }\n    };\n\n    function checkGuessIsCorrect(guessedName) {\n        setKnownCountry(true);\n        setDuplicateGuess(false);\n        if (guessedName === name.toLowerCase()) {\n            setCorrectGuess(true);\n        } else {\n            setIncorrectCount(incorrectCount + 1)\n            setCorrectGuess(false);\n            isGuessBorderingCountry(guessedName);\n        }\n        setGuesses([...guesses, guessedName]);\n    }\n\n    function isGuessBorderingCountry(guessedName) {\n        if (!correctGuess && borderingCountries.find(country => country.toLowerCase() === guessedName)) {\n            setGuessedBorderingCountry(true);\n        } else {\n            setGuessedBorderingCountry(false);\n        }\n    }\n\n    useEffect(() => {\n        if (incorrectCount >= 6) {\n            setFailed(true);\n        }\n    })\n\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Guess the Mystery Country</h2>\n                <br />\n                <Container>\n                    <Row>\n                        <Col>\n                            {<p>Population: {population}</p>}\n                        </Col>\n                        <Col>\n                            {incorrectCount >= 1 && <p>Region: {region}</p>}\n                        </Col>\n                        <Col>\n                            {incorrectCount >= 2 && <p>{landlocked}</p>}\n                        </Col>\n                        <Col>\n                            {incorrectCount >= 3 && <p>Sub region: {subregion}</p>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            {incorrectCount >= 4 && <div>\n                                <p>Flag: </p>\n                                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n                            </div>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <br />\n                            {incorrectCount >= 5 && <p>Capital city: {capital}</p>}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>}\n            <div id='country-form'>\n                <br />\n                {!correctGuess && !failed && <CountryForm\n                    possibleCountries={possibleCountries}\n                    value={value}\n                    setValue={setValue}\n                    handleSubmit={handleSubmit}\n                />}\n            </div>\n            <BasicValidation\n                duplicateGuess={duplicateGuess}\n                knownCountry={knownCountry}\n            />\n            {!correctGuess && guesses.length > 0 && !failed && <CountryGuessFeedback\n                guesses={guesses}\n                incorrectCount={incorrectCount}\n                duplicateGuess={duplicateGuess}\n                guessedBorderingCountry={guessedBorderingCountry}\n            />}\n            {correctGuess && !failed && <CountryGuesserSuccessPage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                flag={flag}\n                incorrectCount={incorrectCount}\n                guesses={guesses}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n            />}\n            {failed && <CountryGuesserFailurePage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                flag={flag}\n                guesses={guesses}\n            />}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import axios from 'axios';\nimport { capitalizeText, numberWithCommas } from './utils';\n\nasync function allCountriesRequest() {\n  try {\n    const response = await axios.get(`https://restcountries.com/v3.1/all`);\n    const body = response.data;\n\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        const code = country.cca3;\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const returnObject = {\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n      responseBody: body,\n    }\n    return returnObject;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function selectCountry(countriesArray, countriesResponse, countryCodeMapping) {\n  const selectedCountry = countriesArray[Math.floor(Math.random() * countriesArray.length)];\n  const country = countriesResponse.find(country => country.name.common.toLowerCase() === selectedCountry.toLowerCase());\n  const countryObj = {\n    name: country.name.common,\n    borderingCountries: returnBorderingCountries(country.borders, countryCodeMapping),\n    capital: capitalizeText(country.capital),\n    landlocked: country.landlocked ? 'The country is landlocked' : 'The country has a coastline',\n    map: country.maps.googleMaps,\n    population: numberWithCommas(country.population),\n    flag: country.flags.png,\n    region: country.region,\n    subregion: country.subregion,\n  };\n  return countryObj;\n}\n\n\nfunction returnBorderingCountries(borderingCountries, countryCodeMapping) {\n  const answerCountries = [];\n  if (borderingCountries) {\n    borderingCountries.forEach(borderingCountry => {\n      countryCodeMapping.find(country => {\n        if (country.code === borderingCountry) {\n          answerCountries.push(country.name);\n        }\n      })\n    });\n  }\n  return answerCountries;\n}\n\nexport default allCountriesRequest;\n","import React from 'react';\nimport CountryGuesser from './countryGuesser/countryGuesser';\nimport { selectCountry } from '../helpers/countryHelper';\n\nfunction Country(props) {\n  const countriesInfo = props.countriesInfo;\n\n  const countryCodeMapping = countriesInfo.countryCodeMapping\n  const possibleCountries = countriesInfo.countriesArray;\n  const allCountriesResponseBody = countriesInfo.responseBody;\n  const country = selectCountry(possibleCountries, allCountriesResponseBody, countryCodeMapping);\n\n  return (\n    <div id='country'>\n      {country && <CountryGuesser\n        countriesInfo={countriesInfo}\n        country={country}\n        possibleCountries={possibleCountries}\n      />}\n    </div >\n  );\n}\n\nexport default Country;\n","import React, { useState } from 'react';\nimport Button from './button';\nimport { ListGroup } from 'react-bootstrap';\nimport allCountryStats from '../helpers/allCountryDefaultStats';\n\nfunction Stats() {\n    const [showStats, setShowStats] = useState(false);\n    const [buttonText, setButtonText] = useState('Show Stats');\n\n    const countryBordersHighScores = JSON.parse(localStorage.getItem('countryHighScores')) || allCountryStats;\n    const countryMap = Object.entries(countryBordersHighScores).map((countryObj) => {\n        return {\n            name: countryObj[0],\n            stats: countryObj[1],\n        }\n    });\n    const numberOfCountryGuesserGames = JSON.parse(localStorage.getItem('numberOfGames'));\n    const numberOfCountryGuesserWins = JSON.parse(localStorage.getItem('numberOfWins'));\n    const numberOfCountryGuesserAttempts = JSON.parse(localStorage.getItem('numberOfAttempts'));\n    const countryGuesserStreak = JSON.parse(localStorage.getItem('streak'));\n\n    const numberOfBorderGames = JSON.parse(localStorage.getItem('numberOfBorderGames'));\n    const numberOfBorderWins = JSON.parse(localStorage.getItem('numberOfBorderWins'));\n    const numberOfCorrectBorderAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers'));\n    const numberOfIncorrectBorderAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers'));\n    const borderStreak = JSON.parse(localStorage.getItem('borderStreak'));\n\n    function showStatsCallback() {\n        if (showStats) {\n            setShowStats(false);\n            setButtonText('Show Stats');\n        } else {\n            setShowStats(true);\n            setButtonText('Hide Stats');\n        }\n    }\n\n    return (\n        <div id='stats-page'>\n            <br />\n            <Button\n                callback={showStatsCallback}\n                buttonText={buttonText}\n            />\n            {showStats && <div>\n                <br />\n                <h2>Country Guesser Stats</h2>\n                <p>Total games: {numberOfCountryGuesserGames}</p>\n                <p>Number of wins: {numberOfCountryGuesserWins}</p>\n                {numberOfCountryGuesserWins > 0 && <p>Win percentage: {((numberOfCountryGuesserWins / numberOfCountryGuesserGames) * 100).toFixed(1)}%</p>}\n                {numberOfCountryGuesserWins > 0 && <p>Number of guesses per correct answer: {(numberOfCountryGuesserAttempts / numberOfCountryGuesserWins).toFixed(1)}</p>}\n                {numberOfCountryGuesserWins > 0 && <p>Streak: {countryGuesserStreak}</p>}\n                <br />\n\n                <h2>Bordering Countries Guesser Stats</h2>\n                <p>Total games: {numberOfBorderGames}</p>\n                <p>Number of wins: {numberOfBorderWins}</p>\n                {numberOfBorderWins > 0 && <p>Win percentage: {((numberOfBorderWins / numberOfBorderGames) * 100).toFixed(1)}%</p>}\n                {numberOfCorrectBorderAnswers > 0 && <p>Average number of correct answers per game: {(numberOfCorrectBorderAnswers / numberOfBorderGames).toFixed(1)}</p>}\n                {numberOfIncorrectBorderAnswers > 0 && <p>Average number of incorrect answers per game: {(numberOfIncorrectBorderAnswers / numberOfBorderGames).toFixed(1)}</p>}\n                {numberOfBorderWins > 0 && <p>Streak: {borderStreak}</p>}\n                <br />\n\n                <h2>Country Stats</h2>\n                <ListGroup id='country-stats'>\n                    {countryMap.map((c, index) => {\n                        if (c.stats.best || c.stats.bestBorders) {\n                            const countryGuesserHighScore = c.stats.best === 99 ? 'FAILED' : c.stats.best;\n                            const borderingCountryHighScore = c.stats.bestBorders === 99 ? 'FAILED' : c.stats.bestBorders;\n                            return < ListGroup.Item key={index}><b>{c.name}</b> <br />Country Guesser High Score: {countryGuesserHighScore || 'N/A'} <br />\n                                Bordering Countries Guesser High Score: {borderingCountryHighScore || 'N/A'}</ListGroup.Item>\n                        }\n                    })}\n                </ListGroup>\n            </div>}\n        </div>\n    );\n}\n\nexport default Stats;\n","import React, { useState, useEffect } from 'react';\nimport Country from './components/country';\nimport Stats from './components/stats';\nimport getAllCountriesRequest from './helpers/countryHelper';\nimport './app.css'\n\nfunction App() {\n  const [allCountriesResponse, setAllCountriesResponse] = useState();\n  const [foundCountry, setFindCountry] = useState(false);\n\n  useEffect(() => {\n    if (!foundCountry) {\n      getAllCountriesRequest()\n        .then(allCountriesResponse => {\n          setFindCountry(true);\n          setAllCountriesResponse(allCountriesResponse);\n        });\n    }\n  });\n\n  return (\n    <div id='app'>\n      <div id='header'>\n        <h1 style={{ fontSize: '4rem' }}>FUN WITH COUNTRIES!</h1>\n      </div>\n      {allCountriesResponse && <Country\n        countriesInfo={allCountriesResponse}\n      />}\n      <Stats />\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}