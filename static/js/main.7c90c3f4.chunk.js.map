{"version":3,"sources":["components/playButton.js","helpers/allCountriesRequest.js","helpers/utils.js","components/resultPages/failurePage.js","components/guessFeedback/basicValidation.js","components/guessFeedback/borderingCountriesFeedback.js","components/resultPages/borderingCountriesSuccessPage.js","components/borderingCountriesGuesser.js","components/resultPages/countryGuesserSuccessPage.js","components/guessFeedback/countryGuessFeedback.js","components/countryGuesser.js","components/country.js","App.js","index.js"],"names":["PlayButton","props","callback","buttonText","id","Button","variant","size","onClick","a","axios","get","response","body","data","countriesArray","countryCodeMapping","extraCountries","forEach","country","name","common","unMember","independent","includes","push","countryMappingObj","code","cca3","selectCountry","returnObject","sort","console","log","countriesResponse","selectedCountry","Math","floor","random","length","find","toLowerCase","borders","capital","landlocked","map","maps","googleMaps","population","flags","png","region","subregion","allCountriesRequest","capitalizeText","stringArray","stringArrayAsString","count","string","splitString","split","i","charAt","toUpperCase","slice","capitalizedString","join","FailurePage","borderingCountriesCount","missingAnswersArray","flag","borderingCountries","correctGuesses","guesses","filter","countryGuess","useState","newGameStarted","setNewGameStarted","allCountriesResponse","setAllCountriesResponse","getAllCountriesRequest","style","color","href","border","src","alt","countriesInfo","basicValidation","duplicateGuess","knownCountry","borderingCountriesFeedback","incorrectGuesses","incorrectCount","guessesRemainingCount","guessesRemainingText","countriesRemainingCount","countriesRemainingText","BorderingCountriesSuccessPage","messageText","borderingCountriesGuesser","possibleCountries","numberOfBorderingCountriesText","setCorrectGuesses","correctLastGuess","setCorrectLastGuess","setIncorrectGuesses","setIncorrectCount","setGuesses","setDuplicateGuess","failed","setFailed","succeeded","setSucceeded","setKnownCountry","setSelectCountry","guessedActualCountry","setGuessedActualCountry","Form","onSubmit","event","preventDefault","guessedName","target","value","trim","isValidCountry","Group","className","onChange","options","placeholder","selected","type","CountryGuesserSuccessPage","borderingCountriesGameStarted","setBorderingCountriesGameStarted","newCountryFinderGameStarted","setNewCountryFinderGameStarted","CountryGuesser","guessAttempted","setGuessAttempted","correctGuess","setCorrectGuess","Country","number","toString","replace","answerCountries","borderingCountry","returnBorderingCountries","App","foundCountry","setFindCountry","useEffect","then","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c90c3f4.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nfunction PlayButton(props) {\n    const callback = props.callback;\n    const buttonText = props.buttonText;\n\n    return (\n        <div id='new-game-button'>\n            <Button variant='primary' size='lg' onClick={callback}>{buttonText}</Button>\n        </div>\n    );\n}\n\nexport default PlayButton;\n","import axios from 'axios';\n\n// https://restcountries.com/\n\nasync function allCountriesRequest() {\n  try {\n    const response = await axios.get(`https://restcountries.com/v3.1/all`);\n    const body = response.data;\n\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        const code = country.cca3;\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const country = selectCountry(countriesArray, body);\n\n    const returnObject = {\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n      country,\n    }\n    return returnObject;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction selectCountry(countriesArray, countriesResponse) {\n  const selectedCountry = countriesArray[Math.floor(Math.random() * countriesArray.length)];\n  const country = countriesResponse.find(country => country.name.common.toLowerCase() === selectedCountry.toLowerCase());\n  const countryObj = {\n    name: country.name.common,\n    borders: country.borders,\n    capital: country.capital,\n    landlocked: country.landlocked,\n    map: country.maps.googleMaps,\n    population: country.population,\n    flags: country.flags.png,\n    region: country.region,\n    subregion: country.subregion,\n  };\n  return countryObj;\n}\n\nexport default allCountriesRequest;\n","// TODO tidy up and rename\n\nfunction capitalizeText(stringArray) {\n    // TODO replace ' and ' with ' & '\n    let stringArrayAsString = '';\n    let count = 0;\n    stringArray.forEach(string => {\n        const originalString = string;\n        const splitString = originalString.split(' ');\n        for (let i = 0; i < splitString.length; i++) {\n            splitString[i] = splitString[i].charAt(0).toUpperCase() + splitString[i].slice(1);\n        }\n        const capitalizedString = splitString.join(' ');\n        if (count === 0) {\n            stringArrayAsString = capitalizedString;\n        } else {\n            stringArrayAsString = stringArrayAsString + ', ' + capitalizedString;\n        }\n        count ++;\n    });\n    return stringArrayAsString;\n}\n\nexport default capitalizeText;\n","import React, { useState } from 'react';\nimport Country from '../country';\nimport PlayButton from '../playButton';\nimport getAllCountriesRequest from '../../helpers/allCountriesRequest';\nimport capitalizeText from '../../helpers/utils';\n\nfunction FailurePage(props) {\n    const name = props.name;\n    const flag = props.flag;\n    const map = props.map;\n    const borderingCountries = props.borderingCountries;\n    const correctGuesses = props.correctGuesses;\n    const guesses = props.guesses;\n\n    let borderingCountriesCount;\n    let missingAnswersArray;\n    if (borderingCountries) {\n        borderingCountriesCount = borderingCountries.length;\n        missingAnswersArray = borderingCountries.filter(countryGuess => !correctGuesses.includes(countryGuess.toLowerCase()));\n    }\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div id='failure-page'>\n            {!newGameStarted && <p style={{ color: 'red' }}>Unlucky, better luck next time</p>}\n            {!borderingCountries && !newGameStarted && < div id='country-failure' >\n                {<p>The answer was <a href={map}>{name}</a></p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                <img style={{ border: 'solid' }} src={flag} alt='Country Flag' />\n            </div >}\n\n            {borderingCountries && !newGameStarted && < div id='bordering-countries-failure' >\n                {!correctGuesses && <p>You found none of the {borderingCountriesCount} bordering countries</p>}\n                {correctGuesses && correctGuesses.length > 0 && <p>You found {correctGuesses.length} bordering countries out of {borderingCountriesCount}</p>}\n                {correctGuesses && correctGuesses.length > 0 && <p>You found: {capitalizeText(correctGuesses)}</p>}\n                {missingAnswersArray && <p>You missed: {capitalizeText(missingAnswersArray)}</p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<p>See {name} on the <a href={map}>map</a></p>}\n            </div >}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Try again'\n            />}\n            {newGameStarted && allCountriesResponse && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default FailurePage;\n","import React from 'react';\n\nfunction basicValidation(props) {\n    const duplicateGuess = props.duplicateGuess;\n    const knownCountry = props.knownCountry;\n\n    return (\n        <div style={{ color: 'brown' }} id='invalid-guess-feedback'>\n            {duplicateGuess && <p>You've already tried that country!</p>}\n            {!knownCountry && <p>Enter a valid country name</p>}\n        </div>\n    )\n}\n\nexport default basicValidation;\n","import React from 'react';\nimport capitalizeText from '../../helpers/utils';\n\nfunction borderingCountriesFeedback(props) {\n    const correctGuesses = props.correctGuesses;\n    const incorrectGuesses = props.incorrectGuesses;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const incorrectCount = props.incorrectCount;\n\n    const guessesRemainingCount = 6 - incorrectCount;\n    const guessesRemainingText = incorrectCount >= 5\n        ? `You have ${guessesRemainingCount} life remaining`\n        : `You have ${guessesRemainingCount} lives remaining`;\n\n    const countriesRemainingCount = borderingCountriesCount - correctGuesses.length;\n    const countriesRemainingText = correctGuesses.length === borderingCountriesCount - 1\n        ? `There is ${countriesRemainingCount} bordering country remaining`\n        : `There are ${countriesRemainingCount} bordering countries remaining`;\n\n    return (\n        <div id='bordering-countries-guess-feedback'>\n            {/* TODO make a bigger deal about correct and incorrect guesses e.g. colours etc. */}\n            {correctGuesses.length > 0 && <p>Correct answers so far: {capitalizeText(correctGuesses)}</p>}\n            {incorrectGuesses.length > 0 && <p>Incorrect answers so far: {capitalizeText(incorrectGuesses)}</p>}\n            <br />\n            <p>{guessesRemainingText}</p>\n            <p>{countriesRemainingText}</p>\n        </div>\n    )\n}\n\nexport default borderingCountriesFeedback;\n","import React, { useState } from 'react';\nimport Country from '../country';\nimport PlayButton from '../playButton';\nimport getAllCountriesRequest from '../../helpers/allCountriesRequest';\nimport capitalizeText from '../../helpers/utils';\n\nfunction BorderingCountriesSuccessPage(props) {\n    const incorrectGuesses = props.incorrectGuesses;\n    const correctGuesses = props.correctGuesses;\n    const name = props.name;\n    const map = props.map;\n    const guesses = props.guesses;\n    const incorrectCount = incorrectGuesses.length;\n\n    const messageText = correctGuesses.length === 1\n        ? `Well done! You found the only bordering country of ${name} with ${incorrectCount} incorrect answer(s)`\n        : `Well done! You found the ${correctGuesses.length} bordering countries of ${name} with ${incorrectCount} incorrect answers`;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-bordering-countries-game' >\n                <h5>{messageText}</h5>\n                <p>See <a href={map}>{name}</a> on the map</p>\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Play again'\n            />}\n            {newGameStarted && allCountriesResponse && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default BorderingCountriesSuccessPage;\n","import React, { Fragment, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport BasicValidation from './guessFeedback/basicValidation';\nimport BorderingCountriesFeedback from './guessFeedback/borderingCountriesFeedback';\nimport FailurePage from './resultPages/failurePage';\nimport BorderingCountriesSuccessPage from './resultPages/borderingCountriesSuccessPage';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction borderingCountriesGuesser(props) {\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const map = props.map;\n\n    const numberOfBorderingCountriesText = borderingCountries.length > 1\n        ? `There are ${borderingCountries.length} bordering countries to find`\n        : 'There is 1 bordering country to find';\n\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [correctLastGuess, setCorrectLastGuess] = useState(false);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [selectCountry, setSelectCountry] = useState([]);\n    const [guessedActualCountry, setGuessedActualCountry] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n\n        if (guessedName.length > 0) {\n            if (guessedName === name.toLowerCase()) {\n                setGuessedActualCountry(true);\n                setCorrectLastGuess(false);\n            } else {\n                setGuessedActualCountry(false);\n                possibleCountries.find(country => {\n                    if (country.toLowerCase() === guessedName) {\n                        setKnownCountry(true);\n                        isValidCountry = true;\n                    } else {\n                        setDuplicateGuess(false);\n                        setKnownCountry(false);\n                    }\n                });\n            }\n        } else {\n            setKnownCountry(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                const lowerCaseBorderingCountryArray = borderingCountries.map(country => country.toLowerCase());\n                if (lowerCaseBorderingCountryArray.includes(guessedName)) {\n                    setCorrectGuesses([...correctGuesses, guessedName]);\n                    setCorrectLastGuess(true);\n                    if (correctGuesses.length + 1 === borderingCountries.length) {\n                        setSucceeded(true);\n                    }\n                } else {\n                    setIncorrectGuesses([...incorrectGuesses, guessedName]);\n                    setIncorrectCount(incorrectCount + 1);\n                    setCorrectLastGuess(false);\n                    if (incorrectCount >= 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    return (\n        <div id='borders'>\n            {!succeeded && !failed && <div>\n                <h2>Bordering Countries</h2>\n                <p>Your country is: {name}</p>\n                <p>{numberOfBorderingCountriesText}</p>\n                <div id='borders-form'>\n                    {<Form onSubmit={handleSubmit}>\n                        <Fragment>\n                            <Form.Group className='mb-3'>\n                                <Typeahead\n                                    id='bordering-countries-guesser'\n                                    onChange={setSelectCountry}\n                                    options={possibleCountries}\n                                    placeholder='Select your country'\n                                    selected={selectCountry}\n                                />\n                            </Form.Group>\n                        </Fragment>\n                        <Button variant='primary' type='submit'>\n                            Guess\n                        </Button>\n                    </Form>}\n                </div>\n            </div>}\n            {guesses.length > 0 && !failed && !succeeded && <BorderingCountriesFeedback\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                incorrectCount={incorrectCount}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {!succeeded && !correctLastGuess && <div id='invalid-border-guess-feedback'>\n                <BasicValidation\n                    duplicateGuess={duplicateGuess}\n                    knownCountry={knownCountry}\n                />\n                {guessedActualCountry && <p style={{ color: 'brown' }}>That's the actual country! Guess the bordering ones instead</p>}\n            </div>}\n            {failed && !succeeded && <FailurePage\n                name={name}\n                map={map}\n                correctGuesses={correctGuesses}\n                borderingCountries={borderingCountries}\n                guesses={guesses}\n            />}\n            {succeeded && <BorderingCountriesSuccessPage\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                name={name}\n                map={map}\n                guesses={guesses}\n            />}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import React, { useState } from 'react';\nimport BorderingCountriesGuesser from '../borderingCountriesGuesser';\nimport PlayButton from '../playButton';\nimport Country from '../country';\nimport getAllCountriesRequest from '../../helpers/allCountriesRequest';\nimport capitalizeText from '../../helpers/utils';\n\nfunction CountryGuesserSuccessPage(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const flag = props.flag;\n    const map = props.map;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [borderingCountriesGameStarted, setBorderingCountriesGameStarted] = useState(false);\n    const [newCountryFinderGameStarted, setNewCountryFinderGameStarted] = useState(false);\n    const [allCountriesResponse, setAllCountriesResponse] = useState();\n\n    function startBorderingCountriesGame() {\n        setBorderingCountriesGameStarted(true);\n        setNewGameStarted(true);\n    }\n\n    async function startNewGame() {\n        setNewCountryFinderGameStarted(true);\n        setNewGameStarted(true);\n        const response = await getAllCountriesRequest();\n        setAllCountriesResponse(response);\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-country-game' >\n                {incorrectCount === 0 && <h5>Amazing! You got <a href={map}>{name}</a> in one!</h5>}\n                {incorrectCount > 0 && <p>Well done! It took you {incorrectCount + 1} attempts to get <a href={map}>{name}</a></p>}\n                {incorrectCount > 0 && <p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n            </div >}\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && borderingCountries.length > 0 && <PlayButton\n                callback={startBorderingCountriesGame}\n                buttonText='Guess the bordering countries'\n            />}\n            {newGameStarted && borderingCountriesGameStarted && <BorderingCountriesGuesser\n                name={name}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n                map={map}\n            />}\n\n            {!newGameStarted && <br />}\n\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText='Play again'\n            />}\n            {newGameStarted && allCountriesResponse && newCountryFinderGameStarted && <Country\n                countriesInfo={allCountriesResponse}\n            />}\n        </div>\n    )\n}\n\nexport default CountryGuesserSuccessPage;\n","import React from 'react';\nimport capitalizeText from '../../helpers/utils';\n\nfunction duplicateGuess(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const duplicateGuess = props.duplicateGuess;\n\n    return (\n        <div id='country-guess-feedback'>\n            {!duplicateGuess && <p style={{ color: 'red' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n            {<p>Your answers so far: {capitalizeText(guesses)}</p>}\n        </div>\n    )\n}\n\nexport default duplicateGuess;\n","import React, { useState, Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport FailurePage from './resultPages/failurePage';\nimport CountryGuesserSuccessPage from './resultPages/countryGuesserSuccessPage';\nimport BasicValidation from './guessFeedback/basicValidation';\nimport CountryGuessFeedback from './guessFeedback/countryGuessFeedback';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryGuesser(props) {\n    const name = props.name;\n    const population = props.population;\n    const flag = props.flag;\n    const landlocked = props.landlocked;\n    const region = props.region;\n    const subregion = props.subregion;\n    const map = props.map;\n    const capital = props.capital;\n    const possibleCountries = props.possibleCountries;\n    const borderingCountries = props.borderingCountries;\n\n    const [guessAttempted, setGuessAttempted] = useState(false);\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [selectCountry, setSelectCountry] = useState([]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n        if (guessedName.length > 0) {\n            possibleCountries.find(country => {\n                if (country.toLowerCase() === guessedName) {\n                    setKnownCountry(true);\n                    isValidCountry = true;\n                } else {\n                    setDuplicateGuess(false);\n                    setGuessAttempted(false);\n                    setKnownCountry(false);\n                }\n            });\n        } else {\n            setKnownCountry(false);\n            setGuessAttempted(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                setGuessAttempted(true);\n                if (guessedName === name.toLowerCase()) {\n                    setCorrectGuess(true);\n                } else {\n                    setIncorrectCount(incorrectCount + 1)\n                    setCorrectGuess(false);\n                    if (incorrectCount >= 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Mystery Country</h2>\n                {<p>Population = {population}</p>}\n                {incorrectCount >= 1 && <p>Region = {region}</p>}\n                {incorrectCount >= 2 && <p>{landlocked}</p>}\n                {incorrectCount >= 3 && <p>Sub region = {subregion}</p>}\n                {incorrectCount >= 4 && <div>\n                    <p>Flag: </p>\n                    {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n                </div>}\n                {incorrectCount >= 5 && <p>Capital city/cities = {capital}</p>}\n            </div>}\n            {/* TODO look into making the forms more generic and reusable */}\n            <div id='country-form'>\n                {!correctGuess && !failed && <Form onSubmit={handleSubmit}>\n                    <Fragment>\n                        <Form.Group className='mb-3'>\n                            <Typeahead\n                                id='country-search'\n                                onChange={setSelectCountry}\n                                options={possibleCountries}\n                                placeholder=\"Select your country\"\n                                selected={selectCountry}\n                            />\n                        </Form.Group>\n                    </Fragment>\n                    <Button variant='primary' type='submit'>\n                        Guess\n                    </Button>\n                </Form>}\n            </div>\n            <BasicValidation\n                duplicateGuess={duplicateGuess}\n                knownCountry={knownCountry}\n            />\n            {!correctGuess && guessAttempted && !failed && <CountryGuessFeedback\n                guesses={guesses}\n                incorrectCount={incorrectCount}\n                duplicateGuess={duplicateGuess}\n            />}\n            {correctGuess && !failed && <CountryGuesserSuccessPage\n                name={name}\n                map={map}\n                flag={flag}\n                incorrectCount={incorrectCount}\n                guesses={guesses}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n            />}\n            {failed && <FailurePage\n                name={name}\n                map={map}\n                flag={flag}\n                guesses={guesses}\n            />}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import React from 'react';\nimport CountryGuesser from './countryGuesser';\nimport capitalizeText from '../helpers/utils';\n\nfunction Country(props) {\n  const countriesInfo = props.countriesInfo;\n\n  const countryCodeMapping = countriesInfo.countryCodeMapping\n  const possibleCountries = countriesInfo.countriesArray;\n  const country = countriesInfo.country;\n\n  function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  function returnBorderingCountries(borderingCountries) {\n    const answerCountries = [];\n    if (borderingCountries) {\n      borderingCountries.forEach(borderingCountry => {\n        countryCodeMapping.find(country => {\n          if (country.code === borderingCountry) {\n            answerCountries.push(country.name);\n          }\n        })\n      });\n    }\n    return answerCountries;\n  }\n\n  return (\n    <div id='country'>\n      {country && <CountryGuesser\n        name={country.name}\n        population={numberWithCommas(country.population)}\n        flag={country.flags}\n        landlocked={country.landlocked ? 'Country is landlocked' : 'Country is not landlocked'}\n        region={country.region}\n        subregion={country.subregion}\n        map={country.map}\n        capital={capitalizeText(country.capital)}\n        borderingCountries={returnBorderingCountries(country.borders)}\n        possibleCountries={possibleCountries}\n      />}\n    </div >\n  );\n}\n\nexport default Country;\n","import React, { useState, useEffect } from 'react';\nimport Country from './components/country';\nimport getAllCountriesRequest from './helpers/allCountriesRequest';\n\n// TODO tidy up CSS for whole app\n// TODO change favicon\nfunction App() {\n  const [allCountriesResponse, setAllCountriesResponse] = useState();\n  const [foundCountry, setFindCountry] = useState(false);\n\n  useEffect(() => {\n    if (!foundCountry) {\n      getAllCountriesRequest()\n        .then(allCountriesResponse => {\n          setFindCountry(true);\n          setAllCountriesResponse(allCountriesResponse);\n        });\n    }\n  });\n\n  return (\n    <div id='app'>\n      <h1>FUN WITH COUNTRIES!</h1>\n      {allCountriesResponse && <Country\n        countriesInfo={allCountriesResponse}\n      />}\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}