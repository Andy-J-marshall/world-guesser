{"version":3,"sources":["components/countryGuesser.js","components/borderingCountriesGuesser.js","restHelpers/allCountriesRequest.js","restHelpers/countryRequest.js","components/country.js","App.js","index.js"],"names":["CountryGuesser","props","useState","guessAttempted","setGuessAttempted","correctGuess","setCorrectGuess","incorrectCount","setIncorrectCount","guesses","setGuesses","duplicateGuess","setDuplicateGuess","failed","setFailed","knownCountry","setKnownCountry","setValue","selectCountry","setSelectCountry","id","className","population","region","landlocked","subregion","style","border","src","flag","alt","capital","Form","onSubmit","event","preventDefault","guessedName","target","value","toLowerCase","trim","isValidCountry","length","possibleCountries","find","country","label","includes","name","Group","Label","onChange","options","placeholder","selected","Button","variant","type","color","toString","href","map","borderingCountriesGuesser","a","agent","https","Agent","rejectUnauthorized","axios","get","httpsAgent","response","body","data","officialCountryNameArray","countriesArray","countryCodeMapping","extraCountries","forEach","common","officialName","official","push","unMember","independent","code","cioc","cca3","countryMappingObj","returnObject","officialCountryNames","sort","console","log","allCountriesRequest","countryCode","url","borders","maps","googleMaps","flags","png","countryRequest","Country","number","countryResponse","setCountryResponse","setPossibleCountries","setCountryCodeMapping","error","setError","ready","setReady","getCountriesInfo","getAllCountriesResp","returnRandomCountryCode","getCountryRequest","getAllCountriesRequest","optionsList","option","countries","selectedCountry","Math","floor","random","countryDetails","size","onClick","replace","App","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b4897e7.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryGuesser(props) {\n    const [guessAttempted, setGuessAttempted] = useState(false);\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState('');\n    const [selectCountry, setSelectCountry] = useState([]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue('');\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n        if (guessedName.length > 0) {\n            props.possibleCountries.find(country => {\n                if (country.label.toLowerCase() === guessedName) {\n                    setKnownCountry(true);\n                    isValidCountry = true;\n                } else {\n                    setDuplicateGuess(false);\n                    setGuessAttempted(false);\n                    setKnownCountry(false);\n                }\n            });\n        } else {\n            setKnownCountry(false);\n            setGuessAttempted(false);\n            setDuplicateGuess(false);\n        }\n\n        if (isValidCountry) {\n            setKnownCountry(true);\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                setGuessAttempted(true);\n                if (guessedName === props.name.toLowerCase()) {\n                    setCorrectGuess(true);\n                } else {\n                    setIncorrectCount(incorrectCount + 1)\n                    setCorrectGuess(false);\n                    if (incorrectCount === 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    // TODO this is causing a warning in the console - check docs for how it works\n    function changeValue(text) {\n        setValue(text.value);\n    }\n\n    // TODO look into making the forms more generic and reusable\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Mystery Country</h2>\n                {<p>Population = {props.population}</p>}\n                {incorrectCount >= 1 && <p>Region = {props.region}</p>}\n                {incorrectCount >= 2 && <p>Landlocked = {props.landlocked}</p>}\n                {incorrectCount >= 3 && <p>Sub region = {props.subregion}</p>}\n                {incorrectCount >= 4 && <div>\n                    <p>Flag: </p>\n                    {<img style={{ border: 'solid' }} src={props.flag} alt='Country Flag' />}\n                </div>}\n                {incorrectCount >= 5 && <p>Capital city/cities = {props.capital}</p>}\n            </div>}\n            <div id='country-form'>\n                {!correctGuess && !failed && <Form onSubmit={handleSubmit}>\n                    <br />\n                    <Fragment>\n                        <Form.Group className='mb-3'>\n                            <Form.Label>Guess the country</Form.Label>\n                            {/* <Form.Control type='text' onChange={changeValue} value={value} /> TODO add the value thing back in? */}\n                            <Typeahead\n                                id='country-search'\n                                onChange={setSelectCountry}\n                                options={props.possibleCountries}\n                                placeholder=\"Select your country\"\n                                selected={selectCountry}\n                            />\n                        </Form.Group>\n                    </Fragment>\n                    <Button variant='primary' type='submit'>\n                        Guess\n                    </Button>\n                </Form>}\n            </div>\n            <br />\n            <div id='invalid-guess-feedback'>\n                {duplicateGuess && <p style={{ color: 'brown' }}>You've already tried that country!</p>}\n                {!knownCountry && <p style={{ color: 'brown' }}>Enter a valid country name</p>}\n            </div>\n            {!correctGuess && guessAttempted && !failed && <div id='guess-feedback'>\n                {!duplicateGuess && <p style={{ color: 'red' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n                {<p>Your guesses so far: {guesses.toString()}</p>}\n            </div>}\n            {correctGuess && !failed && <div id='successful-guess'>\n                {incorrectCount === 0 && <h5>Amazing! You got <a href={props.map}>{props.name}</a> in one!</h5>}\n                {incorrectCount > 0 && <h5>Well done! It took you {incorrectCount + 1} attempts to get <a href={props.map}>{props.name}</a>!</h5>}\n                {<img style={{ border: 'solid' }} src={props.flag} alt='Country Flag' />}\n                <p>Your answer history was: {guesses.toString()}</p>\n            </div>}\n            {failed && <div id='incorrect-guess'>\n                <p style={{ color: 'red' }}>YOU LOST</p>\n                {<p>The answer was <a href={props.map}>{props.name}</a></p>}\n                {<img style={{ border: 'solid' }} src={props.flag} alt='Country Flag' />}\n            </div>}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import React, { Fragment, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction borderingCountriesGuesser(props) {\n    // TODO will all these be used?\n    const [guessAttempted, setGuessAttempted] = useState(false);\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState('');\n    const [selectCountry, setSelectCountry] = useState([]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue('');\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let isValidCountry = false;\n        if (guessedName.length > 0) {\n            props.possibleCountries.find(country => {\n                if (country.label.toLowerCase() === guessedName) {\n                    setKnownCountry(true);\n                    isValidCountry = true;\n                } else {\n                    setDuplicateGuess(false);\n                    setGuessAttempted(false);\n                    setKnownCountry(false);\n                }\n            });\n        } else {\n            setKnownCountry(false);\n            setGuessAttempted(false);\n            setDuplicateGuess(false);\n        }\n\n        // TODO this will need to find the code from the country code mapping\n\n        if (isValidCountry) {\n            if (!guesses.includes(guessedName)) {\n                setDuplicateGuess(false);\n                setGuessAttempted(true);\n                const lowerCaseCountryArray = props.borderingCountries.map(country => country.toLowerCase());\n                if (lowerCaseCountryArray.includes(guessedName)) {\n                    setCorrectGuesses([...correctGuesses, guessedName]);\n                } else {\n                    setIncorrectGuesses(guessedName);\n                    setIncorrectCount(incorrectCount + 1);\n                    setCorrectGuess(false);\n                    if (incorrectCount === 5) {\n                        setFailed(true);\n                    }\n                }\n                setGuesses([...guesses, guessedName]);\n            } else {\n                setDuplicateGuess(true);\n            }\n        }\n    };\n\n    function changeValue(text) {\n        setValue(text.value);\n    }\n\n    return (\n        <div id='borders'>\n            <h2>Bordering Countries</h2>\n            <div id='borders-form'>\n                {<Form onSubmit={handleSubmit}>\n                    <br />\n                    <Fragment>\n                        <Form.Group className='mb-3'>\n                            <Form.Label>Guess the bordering countries</Form.Label>\n                            {/* <Form.Control type='text' onChange={changeValue} value={value} /> TODO add the value thing back in? */}\n                            <Typeahead\n                                id='bordering-countries-guesser'\n                                onChange={setSelectCountry}\n                                options={props.possibleCountries}\n                                placeholder=\"Select your country\"\n                                selected={selectCountry}\n                            />\n                        </Form.Group>\n                    </Fragment>\n                    <Button variant='primary' type='submit'>\n                        Guess\n                    </Button>\n                </Form>}\n            </div>\n            <p>Correct guesses so far: {correctGuesses.toString()}</p>\n            <p>Incorrect guesses so far: {incorrectGuesses.toString()}</p>\n            {/* TODO complete this */}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import axios from 'axios';\nimport https from 'https';\n\n// https://restcountries.com/\n\nasync function allCountriesRequest() {\n  try {\n    // TODO do I still have to do this?\n    const agent = new https.Agent({\n      rejectUnauthorized: false\n    });\n    const response = await axios.get(`https://restcountries.com/v3.1/all`, {\n      httpsAgent: agent,\n    });\n    const body = response.data;\n\n    const officialCountryNameArray = [];\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      const officialName = country.name.official;\n      officialCountryNameArray.push(officialName);\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        let code = country.cioc;\n        if (!code) {\n          code = country.cca3;\n        }\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const returnObject = {\n      officialCountryNames: officialCountryNameArray.sort(),\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n    }\n    return returnObject;\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default allCountriesRequest;\n","import axios from 'axios';\nimport https from 'https';\n\nasync function countryRequest(countryCode) {\n  try {\n    // TODO do I still have to do this?\n    const agent = new https.Agent({\n      rejectUnauthorized: false\n    });\n    if (!countryCode) {\n      console.log('No country code exists for the selected country');\n    }\n    const url = `https://restcountries.com/v3.1/alpha/${countryCode}`;\n    const response = await axios.get(url, {\n      httpsAgent: agent,\n    });\n    const body = response.data[0];\n\n    const returnObject = {\n      name: body.name.common,\n      borders: body.borders,\n      capital: body.capital,\n      landlocked: body.landlocked,\n      map: body.maps.googleMaps,\n      population: body.population,\n      flags: body.flags.png,\n      region: body.region,\n      subregion: body.subregion,\n    };\n\n    return returnObject;\n\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default countryRequest;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport CountryGuesser from './countryGuesser';\nimport BorderingCountriesGuesser from './borderingCountriesGuesser';\nimport getAllCountriesRequest from '../restHelpers/allCountriesRequest';\nimport getCountryRequest from '../restHelpers/countryRequest';\n\nfunction Country() {\n  const [countryResponse, setCountryResponse] = useState();\n  const [possibleCountries, setPossibleCountries] = useState();\n  const [countryCodeMapping, setCountryCodeMapping] = useState();\n  const [error, setError] = useState(false);\n  const [ready, setReady] = useState(false);\n\n  // TODO refactor this!\n  async function getCountry() {\n    try {\n      const getAllCountriesResp = await getCountriesInfo();\n      const countryCode = returnRandomCountryCode(getAllCountriesResp);\n      const response = await getCountryRequest(countryCode); // TODO will this always work? Try complex names\n      setCountryResponse(response);\n      setReady(true);\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n  }\n\n  async function getCountriesInfo() {\n    try {\n      const response = await getAllCountriesRequest();\n      const countriesArray = response.countriesArray;\n      const optionsList = [];\n      countriesArray.forEach(country => {\n        const option = {\n          label: country,\n        }\n        optionsList.push(option);\n      });\n      setPossibleCountries(optionsList);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function returnRandomCountryCode(getAllCountriesResp) {\n    const countries = getAllCountriesResp.countriesArray;\n    const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\n    const { countryCodeMapping } = getAllCountriesResp;\n    setCountryCodeMapping(countryCodeMapping);\n    const countryDetails = countryCodeMapping.find(country => country.name === selectedCountry);\n    return countryDetails.code;\n  }\n\n  function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  return (\n    <div id='country'>\n      {!ready && <Button variant='primary' size='lg' onClick={getCountry}>\n        Press to begin the fun!\n      </Button>}\n      {/* TODO make the error handling more generic? Create a component */}\n      {error && <p>Error found when finding country. Please try again</p>}\n      {ready && <CountryGuesser\n        name={countryResponse.name}\n        population={numberWithCommas(countryResponse.population)}\n        flag={countryResponse.flags}\n        landlocked={countryResponse.landlocked ? 'Yes' : 'No'}\n        region={countryResponse.region}\n        subregion={countryResponse.subregion}\n        map={countryResponse.map}\n        capital={countryResponse.capital.toString()}\n        possibleCountries={possibleCountries}\n      />}\n      {/* TODO should only show this when the other has been done? */}\n      {/* TODO need to tidy up the borders */}\n      {/* {ready && countryResponse.borders && <BorderingCountriesGuesser\n        name={countryResponse.name}\n        borderingCountries={countryResponse.borders}\n        possibleCountries={possibleCountries}\n        countryCodeMapping={countryCodeMapping}\n      />} */}\n      {/* TODO once both completed clear the forms and show the button again? Or link to another page? */}\n    </div >\n  );\n}\n\nexport default Country;\n","import React from 'react';\nimport Country from './components/country';\n\n// TODO tidy up CSS for whole app\n// TODO change favicon\nfunction App() {\n  return (\n    <div id='app'>\n      <h1>FUN WITH COUNTRIES</h1>\n      <Country />\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}